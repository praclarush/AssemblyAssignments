Microsoft (R) Macro Assembler Version 12.00.30501.0	    09/20/15 12:43:37
main.asm						     Page 1 - 1



				;/* ---------------------------------------------------------------------------
				;**
				;** File: main.asm
				;** Description: Week 7 Assignment
				;** Assignment:
				;** Problem 1
				;** Write a procedure to implement the C/C++ string compare procedure: strnicmp()
				;** It should have the interface:
				;** INVOKE Strnicmp, strA, strB, nBytes
				;** Constrain the length N to a maximum of 20 characters.  Use the following test cases
				;**
				;**     1.	compare string MASM and MASM
				;**     2.	compare string MASS and MASM
				;**     3.	compare string mASM and MASm
				;** To show this procedure working, print out the result of the above 3 comparisons by printing the results to the console screen, 
				;** e.g. “Test1, the strings are equal” or “Test1, strings are not equal”
				;**
				;** Problem 2
				;** Write two matrix manipulation procedures and test the matrix identity. Assume the matrices are square 3x3.
				;**     a.	Write a procedure to transpose a matrix A
				;**     b.	Write a procedure to multiply 2 matrices. Y=AB
				;**     c.	Test your two procedures by demonstrating that the following matrix identity holds true: (AB)T = BTAT
				;**     Use for matrix A =  1  5  2  and B = 2  0  1
				;**                         1  0  1          1  3  1
				;**                         2  2  1          2  1  0
				;**
				;** Show that the identity is true by printing out the resultant matrix for left hand side and the right hand side, and showing that they are equal.
				;**
				;** Hint: Use one dimension arrays to store the matrices.
				;**
				;** Author: Nathan Bremmer
				;** -------------------------------------------------------------------------*/


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE macros.inc
			      C .NOLIST
			      C .LIST
			      C 

				ExitProcess proto, dwExitCode:dword
				Strnicmp PROTO, strA : dword, strB : dword, nBytes : dword
				MutiplyMatrixs PROTO, mtxA : dword, mtxB : dword, nRows : dword, nCols : dword

 00000000			.data
				;//problem 1 variables
 00000000 4D 41 53 4D 00	strWord1 byte "MASM", 0
 00000005 4D 41 53 53 00	strWord2 byte "MASS", 0
 0000000A 6D 41 53 4D 00	strWord3 byte "mASM", 0
 0000000F 4D 41 53 6D 00	strWord4 byte "MASm", 0
 00000014 00000000		nLength dword 0

				;//problem 2 variable
 00000018 00000001		matrixA dword 1h, 5h, 2h
	   00000005
	   00000002
 00000024 = 0000000C		RowSizeA = ($ - matrixA)
 00000024  00000001		        dword 1h, 0h, 1h
	   00000000
	   00000001
 00000030  00000002		        dword 2h, 2h, 1h
	   00000002
	   00000001

 0000003C 00000002		matrixB dword 2h, 0h, 1h
	   00000000
	   00000001
 00000048 = 0000000C		RowSizeB = ($ - matrixB)
 00000048  00000001		        dword 1h, 3h, 1h
	   00000003
	   00000001
 00000054  00000002		        dword 2h, 1h, 0h
	   00000001
	   00000000

 00000060  00000009 [		matrixC word 9 dup(0)
	    0000
	   ]
 00000072 54 68 65 20 70	msgProduct byte "The product of Matrix A and Matrix B is: ", 13, 10, 0
	   72 6F 64 75 63
	   74 20 6F 66 20
	   4D 61 74 72 69
	   78 20 41 20 61
	   6E 64 20 4D 61
	   74 72 69 78 20
	   42 20 69 73 3A
	   20 0D 0A 00

 00000000			.code

				;//------------------------------------------------------------------------------
 00000000			main proc
				;//
				;// Description: Main Application Entry Point
				;// Uses: none
				;// Receives: none
				;// Returns: none
				;//------------------------------------------------------------------------------

				;//Problem 1
 00000000			Question1:
				invoke Str_length, addr strWord1
 0000000A  A3 00000014 R	mov nLength, eax
				invoke Strnicmp, addr strWord1, addr strWord1, nLength
				invoke Strnicmp, addr strWord1, addr strWord2, nLength
				invoke Strnicmp, addr strWord3, addr strWord4, nLength
 0000004E  E8 00000000 E	call WaitMsg

 00000053  E8 00000000 E	call Crlf

				;//Problem 2
 00000058			Question2:
 00000058  33 D2		xor edx, edx
 0000005A  BA 00000072 R	mov edx, offset msgProduct
 0000005F  E8 00000000 E	call WriteString

				invoke MutiplyMatrixs, addr matrixA, addr matrixB, 3, 3
 00000077  E8 00000000 E	call WaitMsg

				invoke ExitProcess, 0
 00000083			main endp

				;//------------------------------------------------------------------------------
 00000083			MutiplyMatrixs proc, mtxA:dword, mtxB:dword, nRows : dword, nCols : dword
				;//
				;// Description: Multiples two matrixes
				;// Uses:
				;// Receives:the addresses to Matrix A and Matrix B, the number of columns and rows
				;// Returns:Nothing
				;//------------------------------------------------------------------------------
 0000009E			.data
 0000009E 20 00			space byte ' ', 0
 000000A0 00000000		workingRow dword 0
 000000A4 00000000		workingCol dword 0
 000000A8 00000000		rowCounter dword 0
 000000AC 00000000		colCounter dword 0
 000000B0 00000000		colSize dword 0
 000000B4 00000000		rowSize dword 0
 000000B8 00000000		counter dword 0
 000000BC 00000000		sum dword 0

 00000086			.code
				;//reset variables for call
 00000086  C7 05 000000A0 R	mov workingRow, 0
	   00000000
 00000090  C7 05 000000A4 R	mov workingCol, 0
	   00000000
 0000009A  C7 05 000000A8 R	mov rowCounter, 0
	   00000000
 000000A4  C7 05 000000AC R	mov colCounter, 0
	   00000000
 000000AE  C7 05 000000B0 R	mov colSize, 0
	   00000000
 000000B8  C7 05 000000B4 R	mov rowSize, 0
	   00000000
 000000C2  C7 05 000000B8 R	mov counter, 0
	   00000000
 000000CC  C7 05 000000BC R	mov sum, 0
	   00000000

				;//calc memory places for columns
 000000D6  33 C0		xor eax, eax                    ;//clean register
 000000D8  33 DB		xor ebx, ebx                    ;//clean register
 000000DA  B8 00000003		mov eax, 3                      ;//set the value of eax to 3
 000000DF  8B 5D 14		mov ebx, nCols                  ;//mov the value of nCols to ebx
 000000E2  F7 E3		mul ebx                         ;//multiply the value of ebx by eax
 000000E4  A3 000000B0 R	mov colSize, eax                ;//set the product in eax to colSize

				;//calc memory places for rows
 000000E9  33 C0		xor eax, eax                    ;//clean register
 000000EB  33 DB		xor ebx, ebx                    ;//clean register
 000000ED  B8 00000008		mov eax, 8                      ;//set the value of eax to 8
 000000F2  8B 5D 10		mov ebx, nRows                  ;//mov the value of nCols to ebx
 000000F5  F7 E3		mul ebx                         ;//multiply the value of ebx by eax
 000000F7  A3 000000B4 R	mov rowSize, eax                ;//set the product in eax to colSize

 000000FC			NextRow:
 000000FC  C7 05 000000A4 R	mov workingCol, 0               ;//set the working column to the first column of the row
	   00000000

 00000106			NextCol :
 00000106  A1 000000A0 R	mov eax, workingRow             ;//move the value of workingRow into the eax register
 0000010B  8B 1D 000000A4 R	mov ebx, workingCol             ;//move the value of the workingCol into the ebx register
 00000111  A3 000000A8 R	mov rowCounter, eax             ;//set the rowCounter to the value of the eax register
 00000116  89 1D 000000AC R	mov colCounter, ebx             ;//set the colCounter to thevalue of the ebx revister
 0000011C  C7 05 000000B8 R	mov counter, 0                  ;//zero the counter for new operations
	   00000000
 00000126  C7 05 000000BC R	mov sum, 0                      ;//zero the sum for new operations
	   00000000

 00000130			Next:
				;//multiply
 00000130  8B 75 08		mov esi, mtxA                   ;//move MtxA to the esi register
 00000133  03 35 000000A8 R	add esi, rowCounter             ;//mov the pointer in memory by the amount in rowCounter
 00000139  8B 06		mov eax, [esi]                  ;//move the value at the pointer location to the eax register
 0000013B  8B 75 0C		mov esi, mtxB                   ;//move MtxB to the esi register
 0000013E  03 35 000000AC R	add esi, colCounter             ;//mov the point in memory by the amount in the colCounter
 00000144  8B 1E		mov ebx, [esi]                  ;//mov the value at the pointer location to the ebx register
 00000146  F7 E3		mul ebx                         ;//multiply the ebx register by the eax register

				;//Add 
 00000148  01 05 000000BC R	add sum, eax                    ;//add the value of eax to the value stored in sum
 0000014E  83 05 000000A8 R	add rowCounter, 4               ;//move the rowCounter forward 4 bytes
	   04
 00000155  83 05 000000AC R	add colCounter, 12              ;//move the colCounter forward 12 bytes
	   0C
 0000015C  FF 05 000000B8 R	inc counter                     ;//increment the counter
 00000162  83 3D 000000B8 R	cmp counter, 2                  ;//compare the counter to the value 2
	   02
 00000169  7E C5		jle Next                        ;//jump if the value in counter is less then or equal to 2 this is because we only want to do this operation 3 times note(This is bad, should fix this)

 0000016B			printValue :
 0000016B  A1 000000BC R	mov eax, sum                    ;//move the value of sum into eax for printing to the screen
 00000170  E8 00000000 E	call WriteDec                   ;//write the value of eax to the screen
 00000175  BA 0000009E R	mov edx, offset space           ;//set edx eqaul to the offset of space
 0000017A  E8 00000000 E	call WriteString                ;//write the value of edx to the screen

 0000017F  83 05 000000A4 R	add workingCol, 4               ;//increase the value of workingCol by 4
	   04
 00000186  A1 000000A4 R	mov eax, workingCol             ;//move the value of working col to eax
 0000018B  3B 05 000000B0 R	cmp eax, colSize                ;//compare the value of eax to colSize
 00000191  0F 8E FFFFFF6F	jle NextCol                     ;//jump if the value of eax is less then or equal to colSize
 00000197  E8 00000000 E	call Crlf                       ;//print a new line

 0000019C  83 05 000000A0 R	add workingRow, 12              ;//increase the value of workingRow by 12
	   0C
 000001A3  A1 000000A0 R	mov eax, workingRow             ;//move the value of workingRow to eax
 000001A8  3B 05 000000B4 R	cmp eax, rowSize                ;//compare the value of eax to rowSize
 000001AE  0F 8E FFFFFF48	jle NextRow                     ;//jump if the value of eax is less then or equal to rowSize

 000001B4  E8 00000000 E	call Crlf                       ;//write a new line after everything is done

				ret
 000001BD			MutiplyMatrixs endp

				;//------------------------------------------------------------------------------
 000001BD			TransposeMatrix proc, mtxA:word, mtxB : word
				;//
				;// Description:
				;// Uses:
				;// Receives:
				;// Returns:
				;//------------------------------------------------------------------------------


				ret
 000001C4			TransposeMatrix endp
main.asm(207) : warning A6004:procedure argument or local not referenced : mtxA
main.asm(207) : warning A6004:procedure argument or local not referenced : mtxB

				;//------------------------------------------------------------------------------
 000001C4			Strnicmp proc, strA:dword, strB:dword, nBytes:dword
				;//
				;// Description: Compares two strings writing to the screen if the strings 
				;//              are equal or not equal or if the length is greater then 20
				;// Uses: none
				;// Receives: dword strA, dword strB, dword numBytes (length)
				;// Returns: none
				;//------------------------------------------------------------------------------

 000000C0			.data
 000000C0 20 61 72 65 20	msgEqual byte " are equal", 13, 10, 0
	   65 71 75 61 6C
	   0D 0A 00
 000000CD 20 61 72 65 20	msgNotEqual byte " are not equal", 13, 10, 0
	   6E 6F 74 20 65
	   71 75 61 6C 0D
	   0A 00
 000000DE 20 61 6E 64 20	msgAnd byte " and ", 0
	   00
 000000E4 74 68 65 20 6C	msgLengthError byte "the length of nBytes is greater then 20", 13, 10, 0
	   65 6E 67 74 68
	   20 6F 66 20 6E
	   42 79 74 65 73
	   20 69 73 20 67
	   72 65 61 74 65
	   72 20 74 68 65
	   6E 20 32 30 0D
	   0A 00

 000001C7			.code

				;//clean registers for use
 000001C7  33 F6		xor esi,esi
 000001C9  33 FF		xor edi,edi
 000001CB  33 C9		xor ecx, ecx

 000001CD  8B 75 08		mov esi, strA                   ;//move the value of strA into esi
 000001D0  8B 7D 0C		mov edi, strB                   ;//move the value of strB into edi
 000001D3  8B 4D 10		mov ecx, nBytes                 ;//move the value of nBytes into ecx

 000001D6  83 F9 14		cmp ecx, 20                     ;//compare the value of ecx to 20(max length)
 000001D9  74 53		jz stringToLong                 ;//jump if zero


 000001DB  FC			cld                             ;//Clear the direction flag in prep for looping through strings
 000001DC  F3/ A7		repe cmpsd                      ;//compare each byte in esi and edi 
 000001DE  74 02		jz equal                        ;//jump if the two registers are equal
 000001E0  75 26		jnz notEqual                    ;//jump if the two registers are not equal

 000001E2			equal:
 000001E2  8B 55 08		mov edx, strA                   ;//move the value of strA to edx
 000001E5  E8 00000000 E	call WriteString                ;//write the value of edx to the screen
 000001EA  BA 000000DE R	mov edx, OFFSET msgAnd          ;//move the offset to msgAnd to edx
 000001EF  E8 00000000 E	call WriteString                ;//write the value of edx to the screen
 000001F4  8B 55 0C		mov edx, strB                   ;//write the value of strB to the screen
 000001F7  E8 00000000 E	call WriteString                ;//write the value of edx to the screen
 000001FC  BA 000000C0 R	mov edx, OFFSET msgEqual        ;//move the offset of msgEqual to edx
 00000201  E8 00000000 E	call WriteString                ;//write the value of edx to the screen
 00000206  EB 32		jmp Return                      ;//jump to exit

 00000208			notEqual:
 00000208  8B 55 08		mov edx, strA                   ;//move the value of strA to edx
 0000020B  E8 00000000 E	call WriteString                ;//write the value of edx to the screen
 00000210  BA 000000DE R	mov edx, OFFSET msgAnd          ;//move the offset to msgAnd to edx
 00000215  E8 00000000 E	call WriteString                ;//write the value of edx to the screen
 0000021A  8B 55 0C		mov edx, strB                   ;//write the value of strB to the screen
 0000021D  E8 00000000 E	call WriteString                ;//write the value of edx to the screen
 00000222  BA 000000CD R	mov edx, OFFSET msgNotEqual     ;//move the offset of msgEqual to edx
 00000227  E8 00000000 E	call WriteString                ;//write the value of edx to the screen
 0000022C  EB 0C		jmp Return;//jump to exit

 0000022E			stringToLong:
 0000022E  BA 000000E4 R	mov edx, OFFSET msgLengthError  ;//move the offset of msgLengthError to edx
 00000233  E8 00000000 E	call WriteString                ;//write the value of edx to the screen
 00000238  EB 00		jmp Return                      ;//jump to exit

 0000023A			Return:
				 ret
 0000023E			Strnicmp endp
				end main
Microsoft (R) Macro Assembler Version 12.00.30501.0	    09/20/15 12:43:37
main.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000010E Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000023E Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MutiplyMatrixs . . . . . . . . .	P Near	 00000083 _TEXT	Length= 0000013A Public STDCALL
  mtxA . . . . . . . . . . . . .	DWord	 bp + 00000008
  mtxB . . . . . . . . . . . . .	DWord	 bp + 0000000C
  nRows  . . . . . . . . . . . .	DWord	 bp + 00000010
  nCols  . . . . . . . . . . . .	DWord	 bp + 00000014
  NextRow  . . . . . . . . . . .	L Near	 000000FC _TEXT	
  NextCol  . . . . . . . . . . .	L Near	 00000106 _TEXT	
  Next . . . . . . . . . . . . .	L Near	 00000130 _TEXT	
  printValue . . . . . . . . . .	L Near	 0000016B _TEXT	
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Strnicmp . . . . . . . . . . . .	P Near	 000001C4 _TEXT	Length= 0000007A Public STDCALL
  strA . . . . . . . . . . . . .	DWord	 bp + 00000008
  strB . . . . . . . . . . . . .	DWord	 bp + 0000000C
  nBytes . . . . . . . . . . . .	DWord	 bp + 00000010
  equal  . . . . . . . . . . . .	L Near	 000001E2 _TEXT	
  notEqual . . . . . . . . . . .	L Near	 00000208 _TEXT	
  stringToLong . . . . . . . . .	L Near	 0000022E _TEXT	
  Return . . . . . . . . . . . .	L Near	 0000023A _TEXT	
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
TransposeMatrix  . . . . . . . .	P Near	 000001BD _TEXT	Length= 00000007 Public STDCALL
  mtxA . . . . . . . . . . . . .	Word	 bp + 00000008
  mtxB . . . . . . . . . . . . .	Word	 bp + 0000000C
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000083 Public STDCALL
  Question1  . . . . . . . . . .	L Near	 00000000 _TEXT	
  Question2  . . . . . . . . . .	L Near	 00000058 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
RowSizeA . . . . . . . . . . . .	Number	 0000000Ch   
RowSizeB . . . . . . . . . . . .	Number	 0000000Ch   
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
colCounter . . . . . . . . . . .	DWord	 000000AC _DATA	
colSize  . . . . . . . . . . . .	DWord	 000000B0 _DATA	
counter  . . . . . . . . . . . .	DWord	 000000B8 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
matrixA  . . . . . . . . . . . .	DWord	 00000018 _DATA	
matrixB  . . . . . . . . . . . .	DWord	 0000003C _DATA	
matrixC  . . . . . . . . . . . .	Word	 00000060 _DATA	
msgAnd . . . . . . . . . . . . .	Byte	 000000DE _DATA	
msgEqual . . . . . . . . . . . .	Byte	 000000C0 _DATA	
msgLengthError . . . . . . . . .	Byte	 000000E4 _DATA	
msgNotEqual  . . . . . . . . . .	Byte	 000000CD _DATA	
msgProduct . . . . . . . . . . .	Byte	 00000072 _DATA	
nLength  . . . . . . . . . . . .	DWord	 00000014 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
rowCounter . . . . . . . . . . .	DWord	 000000A8 _DATA	
rowSize  . . . . . . . . . . . .	DWord	 000000B4 _DATA	
space  . . . . . . . . . . . . .	Byte	 0000009E _DATA	
strWord1 . . . . . . . . . . . .	Byte	 00000000 _DATA	
strWord2 . . . . . . . . . . . .	Byte	 00000005 _DATA	
strWord3 . . . . . . . . . . . .	Byte	 0000000A _DATA	
strWord4 . . . . . . . . . . . .	Byte	 0000000F _DATA	
sum  . . . . . . . . . . . . . .	DWord	 000000BC _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
workingCol . . . . . . . . . . .	DWord	 000000A4 _DATA	
workingRow . . . . . . . . . . .	DWord	 000000A0 _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   2 Warnings
	   0 Errors
