Microsoft (R) Macro Assembler Version 12.00.30501.0	    09/27/15 21:18:33
main.asm						     Page 1 - 1


				;/* ---------------------------------------------------------------------------
				;** File: main.asm
				;** Description: Maze Runner Game for Final Project in CSPG360
				;**              Computer Organization and Assembly Language
				;** Author: Nathan Bremmer
				;** -------------------------------------------------------------------------*/

				;//Things left to do
				;//1: Save Scores to text file
				;//2: Read Scores from text file
				;//3: randomly place scoring object on map
				;//Optional if we have time
				;//1:Options Menu
				;// a: turn off scoring objects
				;// b: set time limit

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE macros.inc
			      C .NOLIST
			      C .LIST
			      C 

				.386
				.model flat, stdcall
main.asm(21) : warning A4011:multiple .MODEL directives found : .MODEL ignored
				.stack 4096

				;//Prototypes
				ExitProcess proto, dwExitCode:dword
				GetValueFromMatrix proto matrix : PTR BYTE, cords : COORD, nRows : byte, nCols : byte

				;//Constants
 = 00001388			BUFFER_SIZE = 5000

 00000000			.data

				;//Map data
 00000000 17			mapWidth BYTE 23
 00000001 14			mapHeight BYTE 20
 00000002 00000000		consoleHandle DWORD ?
 00000006 00000000		cursorInfo CONSOLE_CURSOR_INFO <>
	   00000000
 0000000E  00001388 [		buffer Byte BUFFER_SIZE DUP(?)
	    00
	   ]
 00001396  00001388 [		helpBuffer Byte BUFFER_SIZE DUP(?)
	    00
	   ]

				;//Player data - x, y
				ALIGN WORD
 0000271E 0000 0001		FuturePOS COORD <0,1>
				ALIGN WORD
 00002722 0000 0001		CurrentPOS COORD <0,1>
				ALIGN WORD
 00002726 0000 0000		ScorePOS COORD <0,0>
				ALIGN WORD 
 0000272A 0000 0000		TimerPOS COORD <0,0>


				;//game info
 0000272E 54 69 6D 65 20	msgTiming byte "Time Remaining: ", 0
	   52 65 6D 61 69
	   6E 69 6E 67 3A
	   20 00
 0000273F 00000000		timeStart DWORD 0
 00002743 00000000		timePrev DWORD 0
 00002747 00000000		timeElapsed DWORD 0
 0000274B 00000000		timeRemaining DWORD 0
 0000274F 00000000		maxTime DWORD 0


 00002753 53 63 6F 72 65	msgScore byte "Score: ", 0
	   3A 20 00
 0000275B 00000000		score dword 0


 00000000			.code

				;//MACROS
				;//------------------------------------------------------------------------------
				mCopyCOORD MACRO destCOORD:req, sourceCOORD:req
				;//
				;// Description: Copies the values of one COORD struct to another
				;// Avoid Using ax
				;// Receives: a destination coord and a source coord struct; 
				;// Returns: Nothing
				;//------------------------------------------------------------------------------
				push ax

				xor ax, ax
				mov ax, (coord ptr sourceCOORD).X
				mov(coord ptr destCOORD).X, ax

				xor ax, ax
				mov ax, (coord ptr sourceCOORD).Y
				mov(coord ptr destCOORD).Y, ax

				pop ax
				ENDM

				;//------------------------------------------------------------------------------
				mPrintAtLocation MACRO message : req, coords : req, color : req, optionalIntValue
				LOCAL currentTextColor
				;//
				;// Description: prints a string in the specified color at the specified location
				;//              if an optionalIntValue is included print it after the message
				;// Avoid Using: eax, edx
				;// Receives:Message, coords, color, optional Value
				;// Returns:Nothing
				;//------------------------------------------------------------------------------
				.data
				currentTextColor DWORD ?
				.code
				push eax
				push edx

				INVOKE SetConsoleCursorPosition, consoleHandle, coords
				mWrite "                                             ", 0;//shady hack that should be fixed.
				INVOKE SetConsoleCursorPosition, consoleHandle, coords

				call GetTextColor
				mov currentTextColor, eax

				mov eax, color
				call SetTextColor

				mov edx, offset message
				call WriteString

				IFNB < optionalIntValue >
				xor eax,eax
				mov eax, optionalIntValue
				call WriteInt
				ENDIF

				mov eax, currentTextColor
				call SetTextColor

				pop edx
				pop eax
				ENDM

				;//------------------------------------------------------------------------------
 00000000			main proc
				;//
				;// Description: Main Application Entry Point
				;// Receives: Nothing
				;// Returns: Nothing
				;//------------------------------------------------------------------------------

				;//Init
				INVOKE GetStdHandle, STD_OUTPUT_HANDLE
 00000007  A3 00000002 R	mov consoleHandle, eax
				INVOKE GetConsoleCursorInfo, consoleHandle, addr cursorInfo
 0000001C  C7 05 0000000A R	mov cursorInfo.bVisible, FALSE
	   00000000
				INVOKE SetConsoleCursorInfo, consoleHandle, addr cursorInfo

 00000036  C7 05 0000275B R	mov score, 0
	   00000000
 00000040  66| 33 C0		xor ax, ax
 00000043  66| 0F B6 05		movzx ax, mapWidth
	   00000000 R
 0000004B  66| 83 C0 01		add ax, 1
 0000004F  66| A3		mov ScorePOS.X, ax
	   00002726 R
 00000055  66| C7 05		mov ScorePOS.Y, 2
	   00002728 R
	   0002

 0000005E  66| A3		mov TimerPOS.X, ax
	   0000272A R
 00000064  66| C7 05		mov TimerPOS.Y, 1
	   0000272C R
	   0001

				;//End Init

 0000006D			MainScreen:
 0000006D  33 C0		xor eax,eax
 0000006F  E8 000004B6		call MenuScreen

 00000074  66| 83 F8 01		cmp ax, 1
 00000078  74 25		jz StartGame
 0000007A  66| 83 F8 02		cmp ax, 2
 0000007E  74 26		jz ShowScore
 00000080  66| 83 F8 03		cmp ax, 3
 00000084  74 08		jz Help
 00000086  66| 83 F8 04		cmp ax, 4
 0000008A  74 3B		jz ExitProgram

 0000008C  EB DF		jmp MainScreen


 0000008E			Help:
 0000008E  E8 00000094		call PrintHelpFile
 00000093  E8 00000000 E	call Crlf
 00000098  E8 00000000 E	call WaitMsg
 0000009D  EB CE		jmp MainScreen

 0000009F			StartGame:
 0000009F  E8 00000107		call MainGameLoop
 000000A4  EB C7		jmp MainScreen

 000000A6			ShowScore:
 000000A6  E8 0000049F		call ScoreScreen
 000000AB  EB C0		jmp MainScreen

				;//Clean up Before Exit
 000000AD  C7 05 0000000A R	mov cursorInfo.bVisible, TRUE
	   00000001
				INVOKE SetConsoleCursorInfo, consoleHandle, addr cursorInfo

 000000C7			ExitProgram:
				invoke ExitProcess, 0
 000000CE			main endp

				;//Procedures

				;//------------------------------------------------------------------------------
 000000CE			PrintMaze PROC USES edx ecx eax ebx
				;//
				;// Description: Reads the Help file and prints it to the screen.
				;// Uses: edx, ecx, eax, and ebx
				;// Receives: Nothing
				;// Returns: array stored in buffer
				;//------------------------------------------------------------------------------

 0000275F			.data
 0000275F 6C 65 76 65 6C	fileName byte "level.dat", 0
	   2E 64 61 74 00
 00002769 00000000		fileHandle HANDLE ?
 000000D2			.code
 000000D2  E8 00000000 E	call Clrscr
 000000D7  BA 0000275F R	mov edx, OFFSET fileName
 000000DC  E8 00000000 E	call OpenInputFile
 000000E1  A3 00002769 R	mov fileHandle, eax

 000000E6  BA 0000000E R	mov edx, OFFSET buffer
 000000EB  B9 00001388		mov ecx, BUFFER_SIZE
 000000F0  E8 00000000 E	call ReadFromFile

				;//clean registers
 000000F5  B9 00000000		mov ecx, 0
 000000FA  B8 00000000		mov eax, 0
 000000FF  BB 00000000		mov ebx, 0

 00000104  BA 0000000E R	mov edx, OFFSET buffer
 00000109  B9 00001388		mov ecx, SIZEOF buffer

				;//Setup map size and player location
 0000010E  E8 00000000 E	call WriteString
 00000113  E8 00000000 E	call Crlf

 00000118  A1 00002769 R	mov eax, fileHandle
 0000011D  E8 00000000 E	call CloseFile

				ret
 00000127			PrintMaze ENDP

				;//------------------------------------------------------------------------------
 00000127			PrintHelpFile PROC USES edx ecx eax ebx
				;//
				;// Description: Reads the Map from a file into a buffer array and prints it to the screen
				;// Uses: edx, ecx, eax, and ebx
				;// Receives: Nothing
				;// Returns: array stored in buffer
				;//------------------------------------------------------------------------------

 0000276D			.data
 0000276D 48 65 6C 70 46	helpFileName byte "HelpFile.txt", 0
	   69 6C 65 2E 74
	   78 74 00
 0000277A 00000000		helpFileHandle HANDLE ?
 0000012B			.code
 0000012B  E8 00000000 E	call Clrscr
 00000130  BA 0000276D R	mov edx, OFFSET helpFileName
 00000135  E8 00000000 E	call OpenInputFile
 0000013A  A3 0000277A R	mov helpFileHandle, eax

 0000013F  BA 00001396 R	mov edx, OFFSET helpBuffer
 00000144  B9 00001388		mov ecx, BUFFER_SIZE
 00000149  E8 00000000 E	call ReadFromFile

				;//clean registers
 0000014E  B9 00000000		mov ecx, 0
 00000153  B8 00000000		mov eax, 0
 00000158  BB 00000000		mov ebx, 0

 0000015D  BA 00001396 R	mov edx, OFFSET helpBuffer
 00000162  B9 00001388		mov ecx, SIZEOF helpBuffer

				;//Setup map size and player location
 00000167  E8 00000000 E	call WriteString
 0000016C  E8 00000000 E	call Crlf

 00000171  A1 0000277A R	mov eax, helpFileHandle
 00000176  E8 00000000 E	call CloseFile

				ret
 00000180			PrintHelpFile ENDP

				;//------------------------------------------------------------------------------
 00000180			GetValueFromMatrix PROC USES eax ecx edx, 
				matrix: PTR BYTE, coords : COORD, nRows : byte, nCols : byte
				    LOCAL baseAddress : BYTE
				;//
				;// Description: The Main Game Loop
				;// Uses: eax, ecx, edx
				;// Receives: a Pointer to COORDs, nRows and, NCols
				;// Returns: the value in the array at the location specified in matrix using ebx
				;//------------------------------------------------------------------------------
 0000277E			.data
 0000277E 00000000		bytesInRow dword ?
 00000189			.code
 00000189  33 C0		xor eax, eax;//y || row
 0000018B  33 C9		xor ecx, ecx;//x || col
 0000018D  33 DB		xor ebx, ebx

 0000018F  0F B7 4D 0C		movzx ecx, (coord ptr coords).X;//col
 00000193  0F B7 45 0E		movzx eax, (coord ptr coords).Y;//row
 00000197  F6 65 14		mul nCols;//multiply eax by nCols

 0000019A  03 C8		add ecx, eax
 0000019C  0F B6 1C 0D		movzx ebx, [buffer + 1 * ecx]
	   0000000E R
				ret
 000001AB			GetValueFromMatrix ENDP
main.asm(302) : warning A6004:procedure argument or local not referenced : matrix
main.asm(302) : warning A6004:procedure argument or local not referenced : nRows
main.asm(302) : warning A6004:procedure argument or local not referenced : baseAddress

				;//------------------------------------------------------------------------------
 000001AB			MainGameLoop PROC USES eax
				;//
				;// Description: The Main Game Loop
				;// Uses: eax
				;// Receives: Nothing
				;// Returns: value stored in gameOver variable as a 1 or 0
				;//------------------------------------------------------------------------------
 00002782			.data

 000001AC			.code
				;// TODO(Nathan): Need to default COORS for current and future player POS for each new game

 000001AC  E8 FFFFFF1D		call PrintMaze

				;//Start Game Time
 000001B1  C7 05 00002747 R	mov timeElapsed, 0
	   00000000
 000001BB  C7 05 0000273F R	mov timeStart, 0
	   00000000
 000001C5  C7 05 00002743 R	mov timePrev, 0
	   00000000
 000001CF  C7 05 0000274F R	mov maxTime, 40
	   00000028
 000001D9  C7 05 0000274B R	mov timeRemaining, 40
	   00000028
 000001E3  E8 00000000 E	call GetMSeconds
 000001E8  A3 0000273F R	mov timeStart, eax

				;//Draw starting information on screen before entering game loop
				mPrintAtLocation msgScore, ScorePOS, white, score
 00002782		     1	.data
 00002782 00000000	     1	??0000 DWORD ?
 000001ED		     1	.code
 000001ED  50		     1	push eax
 000001EE  52		     1	push edx
			     2	;
main.asm(329) : warning A4006:too many arguments in macro call
 mWrite(1): Macro Called From
  mPrintAtLocation(16): Macro Called From
   main.asm(329): Main Line Code
 00002786		     2		.data		
 00002786 20 20 20 20 20     2		??0001 BYTE "                                             ",0	
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   00
 00000200		     2		.code
 00000200  52		     2		push	edx
 00000201  BA 00002786 R     2		mov	edx,OFFSET ??0001
 00000206  E8 00000000 E     2		call	WriteString
 0000020B  5A		     2		pop	edx
 0000021D  E8 00000000 E     1	call GetTextColor
 00000222  A3 00002782 R     1	mov ??0000, eax
 00000227  B8 0000000F	     1	mov eax, white
 0000022C  E8 00000000 E     1	call SetTextColor
 00000231  BA 00002753 R     1	mov edx, offset msgScore
 00000236  E8 00000000 E     1	call WriteString
 0000023B  33 C0	     1	xor eax,eax
 0000023D  A1 0000275B R     1	mov eax, score
 00000242  E8 00000000 E     1	call WriteInt
 00000247  A1 00002782 R     1	mov eax, ??0000
 0000024C  E8 00000000 E     1	call SetTextColor
 00000251  5A		     1	pop edx
 00000252  58		     1	pop eax
				mPrintAtLocation msgTiming, TimerPOS, white
 000027B4		     1	.data
 000027B4 00000000	     1	??0002 DWORD ?
 00000253		     1	.code
 00000253  50		     1	push eax
 00000254  52		     1	push edx
			     2	;
main.asm(330) : warning A4006:too many arguments in macro call
 mWrite(1): Macro Called From
  mPrintAtLocation(16): Macro Called From
   main.asm(330): Main Line Code
 000027B8		     2		.data		
 000027B8 20 20 20 20 20     2		??0003 BYTE "                                             ",0	
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   00
 00000266		     2		.code
 00000266  52		     2		push	edx
 00000267  BA 000027B8 R     2		mov	edx,OFFSET ??0003
 0000026C  E8 00000000 E     2		call	WriteString
 00000271  5A		     2		pop	edx
 00000283  E8 00000000 E     1	call GetTextColor
 00000288  A3 000027B4 R     1	mov ??0002, eax
 0000028D  B8 0000000F	     1	mov eax, white
 00000292  E8 00000000 E     1	call SetTextColor
 00000297  BA 0000272E R     1	mov edx, offset msgTiming
 0000029C  E8 00000000 E     1	call WriteString
 000002A1  A1 000027B4 R     1	mov eax, ??0002
 000002A6  E8 00000000 E     1	call SetTextColor
 000002AB  5A		     1	pop edx
 000002AC  58		     1	pop eax

 000002AD  E8 000002B7		call UpdatePlayerLocation

 000002B2			GameLoop:
 000002B2  33 DB		xor ebx, ebx
 000002B4  E8 000000F6		call GetPlayerInput

 000002B9  83 FB 01		cmp ebx, 1
 000002BC  74 2D		jz Win

 000002BE  E8 00000047		call UpdateTimer
 000002C3  83 3D 0000274B R	cmp timeRemaining, 0
	   00
 000002CA  74 02		jz GameOver

 000002CC  EB E4		jmp GameLoop

 000002CE			GameOver :
 000002CE  E8 00000000 E	call Clrscr
				mWrite "Game Over, you ran out of time", 13, 10, 0
			     1	;
main.asm(349) : warning A4006:too many arguments in macro call
 mWrite(1): Macro Called From
  main.asm(349): Main Line Code
 000027E6		     1		.data		
 000027E6 47 61 6D 65 20     1		??0004 BYTE "Game Over, you ran out of time",0	
	   4F 76 65 72 2C
	   20 79 6F 75 20
	   72 61 6E 20 6F
	   75 74 20 6F 66
	   20 74 69 6D 65
	   00
 000002D3		     1		.code
 000002D3  52		     1		push	edx
 000002D4  BA 000027E6 R     1		mov	edx,OFFSET ??0004
 000002D9  E8 00000000 E     1		call	WriteString
 000002DE  5A		     1		pop	edx
 000002DF  E8 00000000 E	call Crlf
 000002E4  E8 00000000 E	call WaitMsg
 000002E9  EB 1D		jmp quit

 000002EB			Win:
 000002EB  E8 00000000 E	call Clrscr
				mWrite "you win, we'll do things here later like saving scores", 13, 10, 0;//TODO(Nathan): implement saving of scores
			     1	;
main.asm(356) : warning A4006:too many arguments in macro call
 mWrite(1): Macro Called From
  main.asm(356): Main Line Code
 00002805		     1		.data		
 00002805 79 6F 75 20 77     1		??0005 BYTE "you win, we'll do things here later like saving scores",0	
	   69 6E 2C 20 77
	   65 27 6C 6C 20
	   64 6F 20 74 68
	   69 6E 67 73 20
	   68 65 72 65 20
	   6C 61 74 65 72
	   20 6C 69 6B 65
	   20 73 61 76 69
	   6E 67 20 73 63
	   6F 72 65 73 00
 000002F0		     1		.code
 000002F0  52		     1		push	edx
 000002F1  BA 00002805 R     1		mov	edx,OFFSET ??0005
 000002F6  E8 00000000 E     1		call	WriteString
 000002FB  5A		     1		pop	edx
 000002FC  E8 00000000 E	call Crlf
 00000301  E8 00000000 E	call WaitMsg
 00000306  EB 00		jmp quit

 00000308			quit:
				ret
 0000030A			MainGameLoop ENDP

				;//------------------------------------------------------------------------------
 0000030A			UpdateTimer proc USES eax ebx edx
				;//
;// Description: Updates the Timer in game
				;// Uses: eax ebx edx
				;// Receives: Nothing
				;// Returns: Nothing
				;//------------------------------------------------------------------------------

 0000030D  A1 00002747 R	mov eax, timeElapsed
 00000312  A3 00002743 R	mov timePrev, eax

 00000317  E8 00000000 E	call GetMSeconds
 0000031C  2B 05 0000273F R	sub eax, timeStart
 00000322  BA 00000000		mov edx, 0
 00000327  BB 000003E8		mov ebx, 1000
 0000032C  F7 F3		div ebx

 0000032E  A3 00002747 R	mov timeElapsed, eax

 00000333  8B 1D 0000274F R	mov ebx, maxTime

 00000339  2B 1D 00002747 R	sub ebx, timeElapsed

 0000033F  89 1D 0000274B R	mov timeRemaining, ebx

				mPrintAtLocation msgtiming, TimerPOS, white, timeRemaining
 0000283C		     1	.data
 0000283C 00000000	     1	??0006 DWORD ?
 00000345		     1	.code
 00000345  50		     1	push eax
 00000346  52		     1	push edx
			     2	;
main.asm(391) : warning A4006:too many arguments in macro call
 mWrite(1): Macro Called From
  mPrintAtLocation(16): Macro Called From
   main.asm(391): Main Line Code
 00002840		     2		.data		
 00002840 20 20 20 20 20     2		??0007 BYTE "                                             ",0	
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   00
 00000358		     2		.code
 00000358  52		     2		push	edx
 00000359  BA 00002840 R     2		mov	edx,OFFSET ??0007
 0000035E  E8 00000000 E     2		call	WriteString
 00000363  5A		     2		pop	edx
 00000375  E8 00000000 E     1	call GetTextColor
 0000037A  A3 0000283C R     1	mov ??0006, eax
 0000037F  B8 0000000F	     1	mov eax, white
 00000384  E8 00000000 E     1	call SetTextColor
 00000389  BA 0000272E R     1	mov edx, offset msgtiming
 0000038E  E8 00000000 E     1	call WriteString
 00000393  33 C0	     1	xor eax,eax
 00000395  A1 0000274B R     1	mov eax, timeRemaining
 0000039A  E8 00000000 E     1	call WriteInt
 0000039F  A1 0000283C R     1	mov eax, ??0006
 000003A4  E8 00000000 E     1	call SetTextColor
 000003A9  5A		     1	pop edx
 000003AA  58		     1	pop eax
				ret
 000003AF			UpdateTimer endp

				;//------------------------------------------------------------------------------
 000003AF			GetPlayerInput PROC USES eax
				LOCAL keyPress : BYTE
				;//
				;// Description: Gets the players Input then updates the character POS, Score and
				;//              and timer on the screen
				;// Uses: eax
				;// Receives: Nothing
				;// Returns: value stored in gameOver variable as a 1 or 0
				;//------------------------------------------------------------------------------
 0000286E			.data

 000003B6			.code
 000003B6  C6 45 FF 00		mov keyPress, 0

 000003BA  33 C0		xor eax, eax
 000003BC  B8 0000000A		mov eax, 10
 000003C1  E8 00000000 E	call Delay
 000003C6  E8 00000000 E	call ReadKey

 000003CB  88 45 FF		mov keyPress, al

				.IF(keyPress == "s")
 000003D4  66| FF 05		inc FuturePOS.Y
	   00002720 R
				.ELSEIF(keyPress == "w")
 000003E3  66| FF 0D		dec FuturePOS.Y
	   00002720 R
				.ELSEIF(keyPress == "d")
 000003F2  66| FF 05		inc FuturePOS.X
	   0000271E R
				.ELSEIF(keyPress == "a")
 00000401  66| FF 0D		dec FuturePOS.X
	   0000271E R
				.ENDIF

 00000408  33 DB		xor ebx, ebx
				invoke GetValueFromMatrix, addr buffer, FuturePOS, mapHeight, mapWidth

				;//Check if Move is valid
				.IF(ebx != 0 && ebx != 13 && ebx != 12 && ebx != 43 && ebx != 45 && ebx != 124 && keyPress != 1)

 00000465  E8 000000FF		call UpdatePlayerLocation

				.IF(ebx == 126)
 0000046F  BB 00000001		    mov ebx, 1
 00000474  E9 000000AE		    jmp Quit
				.ELSEIF(ebx == 42);// 157)
 00000480  83 05 0000275B R	    add score, 15
	   0F
				.ELSEIF(ebx == 234)
 00000491  83 05 0000275B R	    add score, 10
	   0A
				.ENDIF

				mPrintAtLocation msgScore, ScorePOS, white, score
 00000498 00000498 00000498 0000286E  1	.data
 0000286E 00000000	     1	??0008 DWORD ?
 00000498		     1	.code
 00000498  50		     1	push eax
 00000499  52		     1	push edx
			     2	;
main.asm(444) : warning A4006:too many arguments in macro call
 mWrite(1): Macro Called From
  mPrintAtLocation(16): Macro Called From
   main.asm(444): Main Line Code
 00002872		     2		.data		
 00002872 20 20 20 20 20     2		??0009 BYTE "                                             ",0	
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   00
 000004AB		     2		.code
 000004AB  52		     2		push	edx
 000004AC  BA 00002872 R     2		mov	edx,OFFSET ??0009
 000004B1  E8 00000000 E     2		call	WriteString
 000004B6  5A		     2		pop	edx
 000004C8  E8 00000000 E     1	call GetTextColor
 000004CD  A3 0000286E R     1	mov ??0008, eax
 000004D2  B8 0000000F	     1	mov eax, white
 000004D7  E8 00000000 E     1	call SetTextColor
 000004DC  BA 00002753 R     1	mov edx, offset msgScore
 000004E1  E8 00000000 E     1	call WriteString
 000004E6  33 C0	     1	xor eax,eax
 000004E8  A1 0000275B R     1	mov eax, score
 000004ED  E8 00000000 E     1	call WriteInt
 000004F2  A1 0000286E R     1	mov eax, ??0008
 000004F7  E8 00000000 E     1	call SetTextColor
 000004FC  5A		     1	pop edx
 000004FD  58		     1	pop eax

				.ElSE
				mCopyCOORD FuturePOS, CurrentPOS
 00000500  66| 50	     1	push ax
 00000502  66| 33 C0	     1	xor ax, ax
 00000505  66| A1	     1	mov ax, (coord ptr CurrentPOS).X
	   00002722 R
 0000050B  66| A3	     1	mov(coord ptr FuturePOS).X, ax
	   0000271E R
 00000511  66| 33 C0	     1	xor ax, ax
 00000514  66| A1	     1	mov ax, (coord ptr CurrentPOS).Y
	   00002724 R
 0000051A  66| A3	     1	mov(coord ptr FuturePOS).Y, ax
	   00002720 R
 00000520  66| 58	     1	pop ax

				.ENDIF

 00000522  BB 00000000		mov ebx, 0

 00000527			Quit:
				ret
 0000052A			GetPlayerInput ENDP

				;//------------------------------------------------------------------------------
 0000052A			MenuScreen PROC USES edx
				;//
				;// Description: Prints the Main Menu and Reads user input
				;// Uses: edx
				;// Receives: Nothing
				;// Returns: player menu choice stored in AX
				;//------------------------------------------------------------------------------
 000028A0			.data
 000028A0 31 3A 20 50 6C	msgMenu byte "1: Play", 13, 10, "2: Scores", 13, 10, "3: Help", 13, 10, "4: Exit", 13, 10, 0
	   61 79 0D 0A 32
	   3A 20 53 63 6F
	   72 65 73 0D 0A
	   33 3A 20 48 65
	   6C 70 0D 0A 34
	   3A 20 45 78 69
	   74 0D 0A 00

 0000052B			.code
 0000052B  33 C0		xor eax, eax
 0000052D  33 D2		xor edx, edx

 0000052F  E8 00000000 E	call Clrscr

 00000534  BA 000028A0 R	mov edx, OFFSET msgMenu
 00000539  E8 00000000 E	call WriteString
 0000053E  E8 00000000 E	call Crlf
 00000543  E8 00000000 E	call readInt

				ret
 0000054A			MenuScreen ENDP

				;//------------------------------------------------------------------------------
 0000054A			ScoreScreen PROC USES eax edx
				;//
				;// Description: Reads and Displays the Scores from a File
				;// Uses: eax and edx
				;// Receives: Nothing
				;// Returns: Nothing
				;//------------------------------------------------------------------------------
 000028C7			.data
 000028C7 53 63 6F 72 65	msgScoreTitle byte "Scores: ", 13, 10, 0
	   73 3A 20 0D 0A
	   00

 0000054C			.code
 0000054C  33 C0		xor eax, eax
 0000054E  33 D2		xor edx, edx

 00000550  E8 00000000 E	call Clrscr

 00000555  BA 000028C7 R	mov edx, OFFSET msgScoreTitle
 0000055A  E8 00000000 E	call WriteString

 0000055F  E8 00000000 E	call WaitMsg
				;/*TODO(Nathan) Task List in order of operations for Score Screen
				 ; *1. Clear Screen
				 ; *2. Read Score File
				 ; *3. Print Scores onto Screen
				 ; *4. Print Options for Return to Main Screen
				 ; */
				ret
 00000567			ScoreScreen ENDP

				;//------------------------------------------------------------------------------
 00000567			SaveScore PROC;
				;//
				;// Description: Saves the Score and Completion Time to a file 
				;// Uses:
				;// Receives: name, score and, time remaining
				;// Returns: Nothing
				;//------------------------------------------------------------------------------
 000028D2			.data
 00000567			.code

 00000567  C3			ret
 00000568			SaveScore ENDP

				;//------------------------------------------------------------------------------
 00000568			GenerateScorePickups PROC
				;//
				;// Description: will randomly place score pickups on the map
				;// Uses: Nothing
				;// Receives: Nothing
				;// Returns: Nothing
				;// Remarks: this might end up as a macro for easer calling.
				;//------------------------------------------------------------------------------

 00000568  C3			ret
 00000569			GenerateScorePickups ENDP

				;//------------------------------------------------------------------------------
 00000569			UpdatePlayerLocation PROC USES eax
				;// Uses: al
				;// Description: Don't Know May Not Be Used;
				;// Receives: the player current and future locations in global variables
				;// Returns: nothing
				;//------------------------------------------------------------------------------
 000028D2			.data
 0000056A			.code
 0000056A  33 C0		xor eax, eax

				;//Draw Player
				INVOKE SetConsoleCursorPosition, consoleHandle, CurrentPOS
 0000057D  B0 20		mov al, " "
 0000057F  E8 00000000 E	call WriteChar

				mCopyCOORD CurrentPOS, FuturePOS
 00000584  66| 50	     1	push ax
 00000586  66| 33 C0	     1	xor ax, ax
 00000589  66| A1	     1	mov ax, (coord ptr FuturePOS).X
	   0000271E R
 0000058F  66| A3	     1	mov(coord ptr CurrentPOS).X, ax
	   00002722 R
 00000595  66| 33 C0	     1	xor ax, ax
 00000598  66| A1	     1	mov ax, (coord ptr FuturePOS).Y
	   00002720 R
 0000059E  66| A3	     1	mov(coord ptr CurrentPOS).Y, ax
	   00002724 R
 000005A4  66| 58	     1	pop ax

				INVOKE SetConsoleCursorPosition, consoleHandle, CurrentPOS
 000005B7  B0 DB		mov al, 0DBh;//player char box thing
 000005B9  E8 00000000 E	call WriteChar

				ret
 000005C0			UpdatePlayerLocation ENDP

				end main
Microsoft (R) Macro Assembler Version 12.00.30501.0	    09/27/15 21:18:33
main.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mCopyCOORD . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mPrintAtLocation . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000028D2 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000005C0 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GenerateScorePickups . . . . . .	P Near	 00000568 _TEXT	Length= 00000001 Public STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetPlayerInput . . . . . . . . .	P Near	 000003AF _TEXT	Length= 0000017B Public STDCALL
  keyPress . . . . . . . . . . .	Byte	 bp - 00000001
  Quit . . . . . . . . . . . . .	L Near	 00000527 _TEXT	
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetValueFromMatrix . . . . . . .	P Near	 00000180 _TEXT	Length= 0000002B Public STDCALL
  matrix . . . . . . . . . . . .	DWord	 bp + 00000008
  coords . . . . . . . . . . . .	DWord	 bp + 0000000C
  nRows  . . . . . . . . . . . .	Byte	 bp + 00000010
  nCols  . . . . . . . . . . . .	Byte	 bp + 00000014
  baseAddress  . . . . . . . . .	Byte	 bp - 00000001
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MainGameLoop . . . . . . . . . .	P Near	 000001AB _TEXT	Length= 0000015F Public STDCALL
  GameLoop . . . . . . . . . . .	L Near	 000002B2 _TEXT	
  GameOver . . . . . . . . . . .	L Near	 000002CE _TEXT	
  Win  . . . . . . . . . . . . .	L Near	 000002EB _TEXT	
  quit . . . . . . . . . . . . .	L Near	 00000308 _TEXT	
MenuScreen . . . . . . . . . . .	P Near	 0000052A _TEXT	Length= 00000020 Public STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PrintHelpFile  . . . . . . . . .	P Near	 00000127 _TEXT	Length= 00000059 Public STDCALL
PrintMaze  . . . . . . . . . . .	P Near	 000000CE _TEXT	Length= 00000059 Public STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SaveScore  . . . . . . . . . . .	P Near	 00000567 _TEXT	Length= 00000001 Public STDCALL
ScoreScreen  . . . . . . . . . .	P Near	 0000054A _TEXT	Length= 0000001D Public STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
UpdatePlayerLocation . . . . . .	P Near	 00000569 _TEXT	Length= 00000057 Public STDCALL
UpdateTimer  . . . . . . . . . .	P Near	 0000030A _TEXT	Length= 000000A5 Public STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000CE Public STDCALL
  MainScreen . . . . . . . . . .	L Near	 0000006D _TEXT	
  Help . . . . . . . . . . . . .	L Near	 0000008E _TEXT	
  StartGame  . . . . . . . . . .	L Near	 0000009F _TEXT	
  ShowScore  . . . . . . . . . .	L Near	 000000A6 _TEXT	
  ExitProgram  . . . . . . . . .	L Near	 000000C7 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	DWord	 00002782 _DATA	
??0001 . . . . . . . . . . . . .	Byte	 00002786 _DATA	
??0002 . . . . . . . . . . . . .	DWord	 000027B4 _DATA	
??0003 . . . . . . . . . . . . .	Byte	 000027B8 _DATA	
??0004 . . . . . . . . . . . . .	Byte	 000027E6 _DATA	
??0005 . . . . . . . . . . . . .	Byte	 00002805 _DATA	
??0006 . . . . . . . . . . . . .	DWord	 0000283C _DATA	
??0007 . . . . . . . . . . . . .	Byte	 00002840 _DATA	
??0008 . . . . . . . . . . . . .	DWord	 0000286E _DATA	
??0009 . . . . . . . . . . . . .	Byte	 00002872 _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BUFFER_SIZE  . . . . . . . . . .	Number	 00001388h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
CurrentPOS . . . . . . . . . . .	COORD	 00002722 _DATA	
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
FuturePOS  . . . . . . . . . . .	COORD	 0000271E _DATA	
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
ScorePOS . . . . . . . . . . . .	COORD	 00002726 _DATA	
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
TimerPOS . . . . . . . . . . . .	COORD	 0000272A _DATA	
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	Byte	 0000000E _DATA	
bytesInRow . . . . . . . . . . .	DWord	 0000277E _DATA	
consoleHandle  . . . . . . . . .	DWord	 00000002 _DATA	
cursorInfo . . . . . . . . . . .	CONSOLE_CURSOR_INFO  00000006 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileHandle . . . . . . . . . . .	DWord	 00002769 _DATA	
fileName . . . . . . . . . . . .	Byte	 0000275F _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
helpBuffer . . . . . . . . . . .	Byte	 00001396 _DATA	
helpFileHandle . . . . . . . . .	DWord	 0000277A _DATA	
helpFileName . . . . . . . . . .	Byte	 0000276D _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
mapHeight  . . . . . . . . . . .	Byte	 00000001 _DATA	
mapWidth . . . . . . . . . . . .	Byte	 00000000 _DATA	
maxTime  . . . . . . . . . . . .	DWord	 0000274F _DATA	
msgMenu  . . . . . . . . . . . .	Byte	 000028A0 _DATA	
msgScoreTitle  . . . . . . . . .	Byte	 000028C7 _DATA	
msgScore . . . . . . . . . . . .	Byte	 00002753 _DATA	
msgTiming  . . . . . . . . . . .	Byte	 0000272E _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
score  . . . . . . . . . . . . .	DWord	 0000275B _DATA	
timeElapsed  . . . . . . . . . .	DWord	 00002747 _DATA	
timePrev . . . . . . . . . . . .	DWord	 00002743 _DATA	
timeRemaining  . . . . . . . . .	DWord	 0000274B _DATA	
timeStart  . . . . . . . . . . .	DWord	 0000273F _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   10 Warnings
	   0 Errors
