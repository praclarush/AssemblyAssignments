Microsoft (R) Macro Assembler Version 12.00.30501.0	    09/27/15 14:28:06
main.asm						     Page 1 - 1


				;/* ---------------------------------------------------------------------------
				;** File: main.asm
				;** Description: Maze Runner Game for Final Project in CSPG360
				;**              Computer Organization and Assembly Language
				;** Author: Nathan Bremmer
				;** -------------------------------------------------------------------------*/

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE macros.inc
			      C .NOLIST
			      C .LIST
			      C 

				.386
				.model flat, stdcall
main.asm(12) : warning A4011:multiple .MODEL directives found : .MODEL ignored
				.stack 4096

				;//Prototypes
				ExitProcess proto, dwExitCode:dword
				GetValueFromMatrix proto matrix : PTR BYTE, cords : COORD, nRows : byte, nCols : byte

				;//Constants
 = 00001388			BUFFER_SIZE = 5000

 00000000			.data

				;//Map data
 00000000 17			mapWidth BYTE 23
 00000001 14			mapHeight BYTE 20
 00000002 00000000		consoleHandle DWORD ?
 00000006 00000000		cursorInfo CONSOLE_CURSOR_INFO <>
	   00000000
 0000000E  00001388 [		buffer Byte BUFFER_SIZE DUP(? )
	    00
	   ]

				;//Player data - x, y
				ALIGN WORD
 00001396 0000 0001		FuturePOS COORD <0,1>
				ALIGN WORD
 0000139A 0000 0001		CurrentPOS COORD <0,1>
				ALIGN WORD
 0000139E 0000 0000		ScorePOS COORD <0,0>
				ALIGN WORD 
 000013A2 0000 0000		TimerPOS COORD <0,0>


				;//game info
 000013A6 54 69 6D 65 20	msgTiming byte "Time Remaining: ", 0
	   52 65 6D 61 69
	   6E 69 6E 67 3A
	   20 00
 000013B7 00000000		timeStart DWORD 0
 000013BB 00000000		timePrev DWORD 0
 000013BF 00000000		timeElapsed DWORD 0
 000013C3 00000000		maxTime DWORD 0
 000013C7 00000000		timeRemaining DWORD 0

 000013CB 53 63 6F 72 65	msgScore byte "Score: ", 0
	   3A 20 00
 000013D3 00000000		score dword 0


 00000000			.code

				;//------------------------------------------------------------------------------
				mCopyCOORD MACRO destCOORD:req, sourceCOORD:req
				;//
				;// Description: Copies the values of one COORD struct to another
				;// Avoid Using ax
				;// Receives: a destination coord and a source coord struct; 
				;// Returns: Nothing
				;//------------------------------------------------------------------------------
				push ax

				xor ax, ax
				mov ax, (coord ptr sourceCOORD).X
				mov(coord ptr destCOORD).X, ax

				xor ax, ax
				mov ax, (coord ptr sourceCOORD).Y
				mov(coord ptr destCOORD).Y, ax

				pop ax
				ENDM

				;//------------------------------------------------------------------------------
				mPrintAtLocation MACRO message : req, coords : req, color : req, optionalIntValue
				LOCAL currentTextColor
				;//
				;// Description: prints a string in the specified color at the specified location
				;//              if an optionalIntValue is included print it after the message
				;// Avoid Using: eax, edx
				;// Receives:Message, coords, color, optional Value
				;// Returns:Nothing
				;//------------------------------------------------------------------------------
				.data
				currentTextColor DWORD ?
				.code
				push eax
				push edx

				INVOKE SetConsoleCursorPosition, consoleHandle, coords
				mWrite "                                             ", 0;//shady hack that should be fixed.
				INVOKE SetConsoleCursorPosition, consoleHandle, coords

				call GetTextColor
				mov currentTextColor, eax

				mov eax, color
				call SetTextColor

				mov edx, offset message
				call WriteString

				IFNB < optionalIntValue >
				xor eax,eax
				mov eax, optionalIntValue
				call WriteInt
				ENDIF

				mov eax, currentTextColor
				call SetTextColor

				pop edx
				pop eax
				ENDM

				;//------------------------------------------------------------------------------
 00000000			main proc
				;//
				;// Description: Main Application Entry Point
				;// Receives: Nothing
				;// Returns: Nothing
				;//------------------------------------------------------------------------------

				;//Init
				INVOKE GetStdHandle, STD_OUTPUT_HANDLE
 00000007  A3 00000002 R	mov consoleHandle, eax
				INVOKE GetConsoleCursorInfo, consoleHandle, addr cursorInfo
 0000001C  C7 05 0000000A R	mov cursorInfo.bVisible, FALSE
	   00000000
				INVOKE SetConsoleCursorInfo, consoleHandle, addr cursorInfo

 00000036  C7 05 000013D3 R	mov score, 0
	   00000000
 00000040  66| 33 C0		xor ax, ax
 00000043  66| 0F B6 05		movzx ax, mapWidth
	   00000000 R
 0000004B  66| 83 C0 01		add ax, 1
 0000004F  66| A3		mov ScorePOS.X, ax
	   0000139E R
 00000055  66| C7 05		mov ScorePOS.Y, 2
	   000013A0 R
	   0002

 0000005E  66| A3		mov TimerPOS.X, ax
	   000013A2 R
 00000064  66| C7 05		mov TimerPOS.Y, 1
	   000013A4 R
	   0001

				;//End Init

 0000006D			MainScreen:
 0000006D  33 C0		xor eax,eax
 0000006F  E8 00000446		call MenuScreen

 00000074  66| 83 F8 01		cmp ax, 1
 00000078  74 0E		jz StartGame
 0000007A  66| 83 F8 02		cmp ax, 2
 0000007E  74 0F		jz ShowScore
 00000080  66| 83 F8 03		cmp ax, 3
 00000084  74 2A		jz ExitProgram

 00000086  EB E5		jmp MainScreen


 00000088			StartGame:
 00000088  E8 000000AE		call MainGameLoop
 0000008D  EB DE		jmp MainScreen

 0000008F			ShowScore:
 0000008F  E8 00000446		call ScoreScreen
 00000094  EB D7		jmp MainScreen

				;//Clean up Before Exit
 00000096  C7 05 0000000A R	mov cursorInfo.bVisible, TRUE
	   00000001
				INVOKE SetConsoleCursorInfo, consoleHandle, addr cursorInfo

 000000B0			ExitProgram:
				invoke ExitProcess, 0
 000000B7			main endp

				;//Procedures
				;//------------------------------------------------------------------------------
 000000B7			PrintMaze PROC USES edx ecx eax ebx
				;//
				;// Description: Reads the Map from a file into a buffer array and prints it to the screen
				;// Uses: edx, ecx, eax, and ebx
				;// Receives: Nothing
				;// Returns: array stored in buffer
				;//------------------------------------------------------------------------------

 000013D7			.data
 000013D7 6C 65 76 65 6C	fileName byte "level.dat", 0
	   2E 64 61 74 00
 000013E1 00000000		fileHandle HANDLE ?
 000000BB			.code
 000000BB  E8 00000000 E	call Clrscr
 000000C0  BA 000013D7 R	mov edx, OFFSET fileName
 000000C5  E8 00000000 E	call OpenInputFile
 000000CA  A3 000013E1 R	mov fileHandle, eax

 000000CF  BA 0000000E R	mov edx, OFFSET buffer
 000000D4  B9 00001388		mov ecx, BUFFER_SIZE
 000000D9  E8 00000000 E	call ReadFromFile

				;//clean registers
 000000DE  B9 00000000		mov ecx, 0
 000000E3  B8 00000000		mov eax, 0
 000000E8  BB 00000000		mov ebx, 0

 000000ED  BA 0000000E R	mov edx, OFFSET buffer
 000000F2  B9 00001388		mov ecx, SIZEOF buffer

				;//Setup map size and player location
 000000F7  E8 00000000 E	call WriteString
 000000FC  E8 00000000 E	call Crlf

 00000101  A1 000013E1 R	mov eax, fileHandle
 00000106  E8 00000000 E	call CloseFile

				ret
 00000110			PrintMaze ENDP

				;//------------------------------------------------------------------------------
 00000110			GetValueFromMatrix PROC USES eax ecx edx, 
				matrix: PTR BYTE, coords : COORD, nRows : byte, nCols : byte
				    LOCAL baseAddress : BYTE
				;//
				;// Description: The Main Game Loop
				;// Uses: eax, ecx, edx
				;// Receives: a Pointer to COORDs, nRows and, NCols
				;// Returns: the value in the array at the location specified in matrix using ebx
				;//------------------------------------------------------------------------------
 000013E5			.data
 000013E5 00000000		bytesInRow dword ?
 00000119			.code
 00000119  33 C0		xor eax, eax;//y || row
 0000011B  33 C9		xor ecx, ecx;//x || col
 0000011D  33 DB		xor ebx, ebx

 0000011F  0F B7 4D 0C		movzx ecx, (coord ptr coords).X;//col
 00000123  0F B7 45 0E		movzx eax, (coord ptr coords).Y;//row
 00000127  F6 65 14		mul nCols;//multiply eax by nCols

 0000012A  03 C8		add ecx, eax
 0000012C  0F B6 1C 0D		movzx ebx, [buffer + 1 * ecx]
	   0000000E R
				ret
 0000013B			GetValueFromMatrix ENDP
main.asm(241) : warning A6004:procedure argument or local not referenced : matrix
main.asm(241) : warning A6004:procedure argument or local not referenced : nRows
main.asm(241) : warning A6004:procedure argument or local not referenced : baseAddress

				;//------------------------------------------------------------------------------
 0000013B			MainGameLoop PROC USES eax
				;//
				;// Description: The Main Game Loop
				;// Uses: eax
				;// Receives: Nothing
				;// Returns: value stored in gameOver variable as a 1 or 0
				;//------------------------------------------------------------------------------
 000013E9			.data

 0000013C			.code
				;// TODO(Nathan): Need to default COORS for current and future player POS for each new game

 0000013C  E8 FFFFFF76		call PrintMaze

				;//Start Game Time

 00000141  C7 05 000013BF R	mov timeElapsed, 100
	   00000064
 0000014B  C7 05 000013B7 R	mov timeStart, 0
	   00000000
 00000155  C7 05 000013BB R	mov timePrev, 0
	   00000000
 0000015F  C7 05 000013C3 R	mov maxTime, 5
	   00000005
 00000169  C7 05 000013C7 R	mov timeRemaining, 5
	   00000005
 00000173  E8 00000000 E	call GetMSeconds
 00000178  A3 000013B7 R	mov timeStart, eax

				;//Draw starting information on screen before entering game loop
				mPrintAtLocation msgScore, ScorePOS, white, score
 000013E9		     1	.data
 000013E9 00000000	     1	??0000 DWORD ?
 0000017D		     1	.code
 0000017D  50		     1	push eax
 0000017E  52		     1	push edx
			     2	;
main.asm(269) : warning A4006:too many arguments in macro call
 mWrite(1): Macro Called From
  mPrintAtLocation(16): Macro Called From
   main.asm(269): Main Line Code
 000013ED		     2		.data		
 000013ED 20 20 20 20 20     2		??0001 BYTE "                                             ",0	
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   00
 00000190		     2		.code
 00000190  52		     2		push	edx
 00000191  BA 000013ED R     2		mov	edx,OFFSET ??0001
 00000196  E8 00000000 E     2		call	WriteString
 0000019B  5A		     2		pop	edx
 000001AD  E8 00000000 E     1	call GetTextColor
 000001B2  A3 000013E9 R     1	mov ??0000, eax
 000001B7  B8 0000000F	     1	mov eax, white
 000001BC  E8 00000000 E     1	call SetTextColor
 000001C1  BA 000013CB R     1	mov edx, offset msgScore
 000001C6  E8 00000000 E     1	call WriteString
 000001CB  33 C0	     1	xor eax,eax
 000001CD  A1 000013D3 R     1	mov eax, score
 000001D2  E8 00000000 E     1	call WriteInt
 000001D7  A1 000013E9 R     1	mov eax, ??0000
 000001DC  E8 00000000 E     1	call SetTextColor
 000001E1  5A		     1	pop edx
 000001E2  58		     1	pop eax
				mPrintAtLocation msgTiming, TimerPOS, white
 0000141B		     1	.data
 0000141B 00000000	     1	??0002 DWORD ?
 000001E3		     1	.code
 000001E3  50		     1	push eax
 000001E4  52		     1	push edx
			     2	;
main.asm(270) : warning A4006:too many arguments in macro call
 mWrite(1): Macro Called From
  mPrintAtLocation(16): Macro Called From
   main.asm(270): Main Line Code
 0000141F		     2		.data		
 0000141F 20 20 20 20 20     2		??0003 BYTE "                                             ",0	
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   00
 000001F6		     2		.code
 000001F6  52		     2		push	edx
 000001F7  BA 0000141F R     2		mov	edx,OFFSET ??0003
 000001FC  E8 00000000 E     2		call	WriteString
 00000201  5A		     2		pop	edx
 00000213  E8 00000000 E     1	call GetTextColor
 00000218  A3 0000141B R     1	mov ??0002, eax
 0000021D  B8 0000000F	     1	mov eax, white
 00000222  E8 00000000 E     1	call SetTextColor
 00000227  BA 000013A6 R     1	mov edx, offset msgTiming
 0000022C  E8 00000000 E     1	call WriteString
 00000231  A1 0000141B R     1	mov eax, ??0002
 00000236  E8 00000000 E     1	call SetTextColor
 0000023B  5A		     1	pop edx
 0000023C  58		     1	pop eax

 0000023D  E8 000002B7		call UpdatePlayerLocation

 00000242			GameLoop:
 00000242  33 DB		xor ebx, ebx
 00000244  E8 000000F6		call GetPlayerInput

 00000249  83 FB 01		cmp ebx, 1
 0000024C  74 2D		jz Win

 0000024E  E8 00000047		call UpdateTimer
 00000253  83 3D 000013C7 R	cmp timeRemaining, 0
	   00
 0000025A  74 02		jz GameOver

 0000025C  EB E4		jmp GameLoop

 0000025E			GameOver :
 0000025E  E8 00000000 E	call Clrscr
				mWrite "Game Over, you ran out of time", 13, 10, 0
			     1	;
main.asm(289) : warning A4006:too many arguments in macro call
 mWrite(1): Macro Called From
  main.asm(289): Main Line Code
 0000144D		     1		.data		
 0000144D 47 61 6D 65 20     1		??0004 BYTE "Game Over, you ran out of time",0	
	   4F 76 65 72 2C
	   20 79 6F 75 20
	   72 61 6E 20 6F
	   75 74 20 6F 66
	   20 74 69 6D 65
	   00
 00000263		     1		.code
 00000263  52		     1		push	edx
 00000264  BA 0000144D R     1		mov	edx,OFFSET ??0004
 00000269  E8 00000000 E     1		call	WriteString
 0000026E  5A		     1		pop	edx
 0000026F  E8 00000000 E	call Crlf
 00000274  E8 00000000 E	call WaitMsg
 00000279  EB 1D		jmp quit

 0000027B			Win:
 0000027B  E8 00000000 E	call Clrscr
				mWrite "you win, we'll do things here later like saving scores", 13, 10, 0
			     1	;
main.asm(296) : warning A4006:too many arguments in macro call
 mWrite(1): Macro Called From
  main.asm(296): Main Line Code
 0000146C		     1		.data		
 0000146C 79 6F 75 20 77     1		??0005 BYTE "you win, we'll do things here later like saving scores",0	
	   69 6E 2C 20 77
	   65 27 6C 6C 20
	   64 6F 20 74 68
	   69 6E 67 73 20
	   68 65 72 65 20
	   6C 61 74 65 72
	   20 6C 69 6B 65
	   20 73 61 76 69
	   6E 67 20 73 63
	   6F 72 65 73 00
 00000280		     1		.code
 00000280  52		     1		push	edx
 00000281  BA 0000146C R     1		mov	edx,OFFSET ??0005
 00000286  E8 00000000 E     1		call	WriteString
 0000028B  5A		     1		pop	edx
 0000028C  E8 00000000 E	call Crlf
 00000291  E8 00000000 E	call WaitMsg
 00000296  EB 00		jmp quit

 00000298			quit:
				ret
 0000029A			MainGameLoop ENDP

				;//------------------------------------------------------------------------------
 0000029A			UpdateTimer proc USES eax ebx edx
				;//
				;// Description: Updates the Timer in game
				;// Uses: eax ebx edx
				;// Receives: Nothing
				;// Returns: Nothing
				;//------------------------------------------------------------------------------

 0000029D  A1 000013BF R	mov eax, timeElapsed
 000002A2  A3 000013BB R	mov timePrev, eax

 000002A7  E8 00000000 E	call GetMSeconds
 000002AC  2B 05 000013B7 R	sub eax, timeStart
 000002B2  BA 00000000		mov edx, 0
 000002B7  BB 000003E8		mov ebx, 1000
 000002BC  F7 F3		div ebx

 000002BE  A3 000013BF R	mov timeElapsed, eax

 000002C3  8B 1D 000013C3 R	mov ebx, maxTime

 000002C9  2B 1D 000013BF R	sub ebx, timeElapsed

 000002CF  89 1D 000013C7 R	mov timeRemaining, ebx

				mPrintAtLocation msgtiming, TimerPOS, white, timeRemaining
 000014A3		     1	.data
 000014A3 00000000	     1	??0006 DWORD ?
 000002D5		     1	.code
 000002D5  50		     1	push eax
 000002D6  52		     1	push edx
			     2	;
main.asm(331) : warning A4006:too many arguments in macro call
 mWrite(1): Macro Called From
  mPrintAtLocation(16): Macro Called From
   main.asm(331): Main Line Code
 000014A7		     2		.data		
 000014A7 20 20 20 20 20     2		??0007 BYTE "                                             ",0	
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   00
 000002E8		     2		.code
 000002E8  52		     2		push	edx
 000002E9  BA 000014A7 R     2		mov	edx,OFFSET ??0007
 000002EE  E8 00000000 E     2		call	WriteString
 000002F3  5A		     2		pop	edx
 00000305  E8 00000000 E     1	call GetTextColor
 0000030A  A3 000014A3 R     1	mov ??0006, eax
 0000030F  B8 0000000F	     1	mov eax, white
 00000314  E8 00000000 E     1	call SetTextColor
 00000319  BA 000013A6 R     1	mov edx, offset msgtiming
 0000031E  E8 00000000 E     1	call WriteString
 00000323  33 C0	     1	xor eax,eax
 00000325  A1 000013C7 R     1	mov eax, timeRemaining
 0000032A  E8 00000000 E     1	call WriteInt
 0000032F  A1 000014A3 R     1	mov eax, ??0006
 00000334  E8 00000000 E     1	call SetTextColor
 00000339  5A		     1	pop edx
 0000033A  58		     1	pop eax
				ret
 0000033F			UpdateTimer endp

				;//------------------------------------------------------------------------------
 0000033F			GetPlayerInput PROC USES eax
				LOCAL keyPress : BYTE
				;//
				;// Description: Gets the players Input then updates the character POS, Score and
				;//              and timer on the screen
				;// Uses: eax
				;// Receives: Nothing
				;// Returns: value stored in gameOver variable as a 1 or 0
				;//------------------------------------------------------------------------------
 000014D5			.data

 00000346			.code
 00000346  C6 45 FF 00		mov keyPress, 0

 0000034A  33 C0		xor eax, eax
 0000034C  B8 0000000A		mov eax, 10
 00000351  E8 00000000 E	call Delay
 00000356  E8 00000000 E	call ReadKey

 0000035B  88 45 FF		mov keyPress, al

				.IF(keyPress == "s")
 00000364  66| FF 05		inc FuturePOS.Y
	   00001398 R
				.ELSEIF(keyPress == "w")
 00000373  66| FF 0D		dec FuturePOS.Y
	   00001398 R
				.ELSEIF(keyPress == "d")
 00000382  66| FF 05		inc FuturePOS.X
	   00001396 R
				.ELSEIF(keyPress == "a")
 00000391  66| FF 0D		dec FuturePOS.X
	   00001396 R
				.ENDIF

 00000398  33 DB		xor ebx, ebx
				invoke GetValueFromMatrix, addr buffer, FuturePOS, mapHeight, mapWidth

				;//Check if Move is valid
				.IF(ebx != 0 && ebx != 13 && ebx != 12 && ebx != 43 && ebx != 45 && ebx != 124 && keyPress != 1)

 000003F5  E8 000000FF		call UpdatePlayerLocation

				.IF(ebx == 126)
 000003FF  BB 00000001		    mov ebx, 1
 00000404  E9 000000AE		    jmp Quit
				.ELSEIF(ebx == 42);// 157)
 00000410  83 05 000013D3 R	    add score, 15
	   0F
				.ELSEIF(ebx == 234)
 00000421  83 05 000013D3 R	    add score, 10
	   0A
				.ENDIF

				mPrintAtLocation msgScore, ScorePOS, white, score
 00000428 00000428 00000428 000014D5  1	.data
 000014D5 00000000	     1	??0008 DWORD ?
 00000428		     1	.code
 00000428  50		     1	push eax
 00000429  52		     1	push edx
			     2	;
main.asm(384) : warning A4006:too many arguments in macro call
 mWrite(1): Macro Called From
  mPrintAtLocation(16): Macro Called From
   main.asm(384): Main Line Code
 000014D9		     2		.data		
 000014D9 20 20 20 20 20     2		??0009 BYTE "                                             ",0	
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   00
 0000043B		     2		.code
 0000043B  52		     2		push	edx
 0000043C  BA 000014D9 R     2		mov	edx,OFFSET ??0009
 00000441  E8 00000000 E     2		call	WriteString
 00000446  5A		     2		pop	edx
 00000458  E8 00000000 E     1	call GetTextColor
 0000045D  A3 000014D5 R     1	mov ??0008, eax
 00000462  B8 0000000F	     1	mov eax, white
 00000467  E8 00000000 E     1	call SetTextColor
 0000046C  BA 000013CB R     1	mov edx, offset msgScore
 00000471  E8 00000000 E     1	call WriteString
 00000476  33 C0	     1	xor eax,eax
 00000478  A1 000013D3 R     1	mov eax, score
 0000047D  E8 00000000 E     1	call WriteInt
 00000482  A1 000014D5 R     1	mov eax, ??0008
 00000487  E8 00000000 E     1	call SetTextColor
 0000048C  5A		     1	pop edx
 0000048D  58		     1	pop eax

				.ElSE
				mCopyCOORD FuturePOS, CurrentPOS
 00000490  66| 50	     1	push ax
 00000492  66| 33 C0	     1	xor ax, ax
 00000495  66| A1	     1	mov ax, (coord ptr CurrentPOS).X
	   0000139A R
 0000049B  66| A3	     1	mov(coord ptr FuturePOS).X, ax
	   00001396 R
 000004A1  66| 33 C0	     1	xor ax, ax
 000004A4  66| A1	     1	mov ax, (coord ptr CurrentPOS).Y
	   0000139C R
 000004AA  66| A3	     1	mov(coord ptr FuturePOS).Y, ax
	   00001398 R
 000004B0  66| 58	     1	pop ax

				.ENDIF

 000004B2  BB 00000000		mov ebx, 0

 000004B7			Quit:
				ret
 000004BA			GetPlayerInput ENDP

				;//------------------------------------------------------------------------------
 000004BA			MenuScreen PROC USES edx
				;//
				;// Description: Prints the Main Menu and Reads user input
				;// Uses: edx
				;// Receives: Nothing
				;// Returns: player menu choice stored in AX
				;//------------------------------------------------------------------------------
 00001507			.data
 00001507 31 3A 20 50 6C	msgMenu byte "1: Play", 13, 10, "2: Scores", 13, 10, "3: Exit", 13, 10, 0
	   61 79 0D 0A 32
	   3A 20 53 63 6F
	   72 65 73 0D 0A
	   33 3A 20 45 78
	   69 74 0D 0A 00

 000004BB			.code
 000004BB  33 C0		xor eax, eax
 000004BD  33 D2		xor edx, edx

 000004BF  E8 00000000 E	call Clrscr

 000004C4  BA 00001507 R	mov edx, OFFSET msgMenu
 000004C9  E8 00000000 E	call WriteString
 000004CE  E8 00000000 E	call Crlf
 000004D3  E8 00000000 E	call readInt

				ret
 000004DA			MenuScreen ENDP

				;//------------------------------------------------------------------------------
 000004DA			ScoreScreen PROC USES eax edx
				;//
				;// Description: Reads and Displays the Scores from a File
				;// Uses: eax and edx
				;// Receives: Nothing
				;// Returns: Nothing
				;//------------------------------------------------------------------------------
 00001525			.data
 00001525 53 63 6F 72 65	msgScoreTitle byte "Scores: ", 13, 10, 0
	   73 3A 20 0D 0A
	   00

 000004DC			.code
 000004DC  33 C0		xor eax, eax
 000004DE  33 D2		xor edx, edx

 000004E0  E8 00000000 E	call Clrscr

 000004E5  BA 00001525 R	mov edx, OFFSET msgScoreTitle
 000004EA  E8 00000000 E	call WriteString

 000004EF  E8 00000000 E	call WaitMsg
				;/*TODO(Nathan) Task List in order of operations for Score Screen
				 ; *1. Clear Screen
				 ; *2. Read Score File
				 ; *3. Print Scores onto Screen
				 ; *4. Print Options for Return to Main Screen, Clear Score List
				 ; *Notes: Read Player Input here?.
				 ; */
				ret
 000004F7			ScoreScreen ENDP

				;//------------------------------------------------------------------------------
 000004F7			SaveScore PROC;
				;//
				;// Description: Saves the Score and Completion Time to a file 
				;// Uses:
				;// Receives: name, score and, time remaining
				;// Returns: Nothing
				;//------------------------------------------------------------------------------
 00001530			.data
 000004F7			.code

 000004F7  C3			ret
 000004F8			SaveScore ENDP

 000004F8			GenerateScorePickups PROC
				;//
				;// Description: will randomly place score pickups on the map
				;// Uses: Nothing
				;// Receives: Nothing
				;// Returns: Nothing
				;// Remarks: this might end up as a macro for easer calling.
				;//------------------------------------------------------------------------------

 000004F8  C3			ret
 000004F9			GenerateScorePickups ENDP

 000004F9			UpdatePlayerLocation PROC USES eax
				;// Uses: al
				;// Description: Don't Know May Not Be Used;
				;// Receives: the player current and future locations in global variables
				;// Returns: nothing
				;//------------------------------------------------------------------------------
 00001530			.data
 000004FA			.code
 000004FA  33 C0		xor eax, eax

				;//Draw Player
				INVOKE SetConsoleCursorPosition, consoleHandle, CurrentPOS
 0000050D  B0 20		mov al, " "
 0000050F  E8 00000000 E	call WriteChar

				mCopyCOORD CurrentPOS, FuturePOS
 00000514  66| 50	     1	push ax
 00000516  66| 33 C0	     1	xor ax, ax
 00000519  66| A1	     1	mov ax, (coord ptr FuturePOS).X
	   00001396 R
 0000051F  66| A3	     1	mov(coord ptr CurrentPOS).X, ax
	   0000139A R
 00000525  66| 33 C0	     1	xor ax, ax
 00000528  66| A1	     1	mov ax, (coord ptr FuturePOS).Y
	   00001398 R
 0000052E  66| A3	     1	mov(coord ptr CurrentPOS).Y, ax
	   0000139C R
 00000534  66| 58	     1	pop ax

				INVOKE SetConsoleCursorPosition, consoleHandle, CurrentPOS
 00000547  B0 DB		mov al, 0DBh;//player char box thing
 00000549  E8 00000000 E	call WriteChar

				ret
 00000550			UpdatePlayerLocation ENDP

				end main
Microsoft (R) Macro Assembler Version 12.00.30501.0	    09/27/15 14:28:06
main.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mCopyCOORD . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mPrintAtLocation . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00001530 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000550 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GenerateScorePickups . . . . . .	P Near	 000004F8 _TEXT	Length= 00000001 Public STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetPlayerInput . . . . . . . . .	P Near	 0000033F _TEXT	Length= 0000017B Public STDCALL
  keyPress . . . . . . . . . . .	Byte	 bp - 00000001
  Quit . . . . . . . . . . . . .	L Near	 000004B7 _TEXT	
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetValueFromMatrix . . . . . . .	P Near	 00000110 _TEXT	Length= 0000002B Public STDCALL
  matrix . . . . . . . . . . . .	DWord	 bp + 00000008
  coords . . . . . . . . . . . .	DWord	 bp + 0000000C
  nRows  . . . . . . . . . . . .	Byte	 bp + 00000010
  nCols  . . . . . . . . . . . .	Byte	 bp + 00000014
  baseAddress  . . . . . . . . .	Byte	 bp - 00000001
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MainGameLoop . . . . . . . . . .	P Near	 0000013B _TEXT	Length= 0000015F Public STDCALL
  GameLoop . . . . . . . . . . .	L Near	 00000242 _TEXT	
  GameOver . . . . . . . . . . .	L Near	 0000025E _TEXT	
  Win  . . . . . . . . . . . . .	L Near	 0000027B _TEXT	
  quit . . . . . . . . . . . . .	L Near	 00000298 _TEXT	
MenuScreen . . . . . . . . . . .	P Near	 000004BA _TEXT	Length= 00000020 Public STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PrintMaze  . . . . . . . . . . .	P Near	 000000B7 _TEXT	Length= 00000059 Public STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SaveScore  . . . . . . . . . . .	P Near	 000004F7 _TEXT	Length= 00000001 Public STDCALL
ScoreScreen  . . . . . . . . . .	P Near	 000004DA _TEXT	Length= 0000001D Public STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
UpdatePlayerLocation . . . . . .	P Near	 000004F9 _TEXT	Length= 00000057 Public STDCALL
UpdateTimer  . . . . . . . . . .	P Near	 0000029A _TEXT	Length= 000000A5 Public STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000B7 Public STDCALL
  MainScreen . . . . . . . . . .	L Near	 0000006D _TEXT	
  StartGame  . . . . . . . . . .	L Near	 00000088 _TEXT	
  ShowScore  . . . . . . . . . .	L Near	 0000008F _TEXT	
  ExitProgram  . . . . . . . . .	L Near	 000000B0 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	DWord	 000013E9 _DATA	
??0001 . . . . . . . . . . . . .	Byte	 000013ED _DATA	
??0002 . . . . . . . . . . . . .	DWord	 0000141B _DATA	
??0003 . . . . . . . . . . . . .	Byte	 0000141F _DATA	
??0004 . . . . . . . . . . . . .	Byte	 0000144D _DATA	
??0005 . . . . . . . . . . . . .	Byte	 0000146C _DATA	
??0006 . . . . . . . . . . . . .	DWord	 000014A3 _DATA	
??0007 . . . . . . . . . . . . .	Byte	 000014A7 _DATA	
??0008 . . . . . . . . . . . . .	DWord	 000014D5 _DATA	
??0009 . . . . . . . . . . . . .	Byte	 000014D9 _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BUFFER_SIZE  . . . . . . . . . .	Number	 00001388h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
CurrentPOS . . . . . . . . . . .	COORD	 0000139A _DATA	
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
FuturePOS  . . . . . . . . . . .	COORD	 00001396 _DATA	
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
ScorePOS . . . . . . . . . . . .	COORD	 0000139E _DATA	
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
TimerPOS . . . . . . . . . . . .	COORD	 000013A2 _DATA	
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	Byte	 0000000E _DATA	
bytesInRow . . . . . . . . . . .	DWord	 000013E5 _DATA	
consoleHandle  . . . . . . . . .	DWord	 00000002 _DATA	
cursorInfo . . . . . . . . . . .	CONSOLE_CURSOR_INFO  00000006 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileHandle . . . . . . . . . . .	DWord	 000013E1 _DATA	
fileName . . . . . . . . . . . .	Byte	 000013D7 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
mapHeight  . . . . . . . . . . .	Byte	 00000001 _DATA	
mapWidth . . . . . . . . . . . .	Byte	 00000000 _DATA	
maxTime  . . . . . . . . . . . .	DWord	 000013C3 _DATA	
msgMenu  . . . . . . . . . . . .	Byte	 00001507 _DATA	
msgScoreTitle  . . . . . . . . .	Byte	 00001525 _DATA	
msgScore . . . . . . . . . . . .	Byte	 000013CB _DATA	
msgTiming  . . . . . . . . . . .	Byte	 000013A6 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
score  . . . . . . . . . . . . .	DWord	 000013D3 _DATA	
timeElapsed  . . . . . . . . . .	DWord	 000013BF _DATA	
timePrev . . . . . . . . . . . .	DWord	 000013BB _DATA	
timeRemaining  . . . . . . . . .	DWord	 000013C7 _DATA	
timeStart  . . . . . . . . . . .	DWord	 000013B7 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   10 Warnings
	   0 Errors
