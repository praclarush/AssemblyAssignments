Microsoft (R) Macro Assembler Version 12.00.30501.0	    09/24/15 21:58:13
main.asm						     Page 1 - 1


				;/* ---------------------------------------------------------------------------
				;**
				;** File: main.asm
				;** Description: Assembly Template
				;** Author: Nathan Bremmer
				;** -------------------------------------------------------------------------*/
				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE macros.inc
			      C .NOLIST
			      C .LIST
			      C 


				.386
				.model flat, stdcall
main.asm(12) : warning A4011:multiple .MODEL directives found : .MODEL ignored
				.stack 4096

				ExitProcess proto, dwExitCode:dword
				GetValueFromMatrix proto matrix : PTR BYTE, cords : COORD, nRows : byte, nCols : byte


 = 00001388			BUFFER_SIZE = 5000

 00000000			.data

				;//Map data
 00000000 17			mapWidth BYTE 23
 00000001 14			mapHeight BYTE 20
 00000002 00000000		consoleHandle DWORD ?
 00000006 00000000		cursorInfo CONSOLE_CURSOR_INFO <>
	   00000000
 0000000E  00001388 [		buffer Byte BUFFER_SIZE DUP(? )
	    00
	   ]

				;//Player data
				ALIGN WORD
 00001396 0000 0001		FuturePOS COORD <0,1> ;//x, y
				ALIGN WORD
 0000139A 0000 0001		CurrentPOS COORD <0,1>
				ALIGN WORD
 0000139E 0000 0000		ScorePOS COORD <>


				;//game info
 000013A2 00000000		score dword 0
 00000000			.code

				;//------------------------------------------------------------------------------
				mCopyCOORD MACRO destCOORD:req, sourceCOORD:req
				;//
				;// Description: Copies the values of one COORD struct to another
				;// Avoid Using ax
				;// Receives: a destination coord and a source coord struct; 
				;// Returns: Nothing
				;//------------------------------------------------------------------------------

				xor ax, ax
				mov ax, (coord ptr sourceCOORD).X
				mov(coord ptr destCOORD).X, ax

				xor ax, ax
				mov ax, (coord ptr sourceCOORD).Y
				mov(coord ptr destCOORD).Y, ax

				ENDM

				;//------------------------------------------------------------------------------
 00000000			main proc
				;//
				;// Description: Main Application Entry Point
				;// Receives: Nothing
				;// Returns: Nothing
				;//------------------------------------------------------------------------------

				;//Init
				INVOKE GetStdHandle, STD_OUTPUT_HANDLE
 00000007  A3 00000002 R	mov consoleHandle, eax
				INVOKE GetConsoleCursorInfo, consoleHandle, addr cursorInfo
 0000001C  C7 05 0000000A R	mov cursorInfo.bVisible, FALSE
	   00000000
				INVOKE SetConsoleCursorInfo, consoleHandle, addr cursorInfo

 00000036  C7 05 000013A2 R	mov score, 0
	   00000000

 00000040  66| C7 05		mov ScorePOS.Y, 10
	   000013A0 R
	   000A
 00000049  66| 33 C0		xor ax, ax
 0000004C  66| 0F B6 05		movzx ax, mapWidth
	   00000000 R
				movzx ScorePOS.x, mapWidth
main.asm(82) : error A2000:memory operand not allowed in context

				;//End Init

				;//MainScreen:
				;//call MenuScreen
				;//
				;//cmp ax, 1
				;//jz StartGame
				;//cmp ax, 2
				;//jz ShowOptions
				;//cmp ax, 3
				;//jz ShowScore
				;//cmp ax, 4
				;//jz ExitProgram
				;//
				;//jmp MainScreen
				;//
				;//StartGame:
 00000054  E8 0000002B		call PrintMaze
 00000059  E8 000001DF		call UpdatePlayerLocation
 0000005E  E8 0000009A		call MainGameLoop
				;//jmp MainScreen
				;//
				;//ShowScore:
				;//call ScoreScreen
				;//
				;//jmp MainScreen
				;//
				;//ShowOptions:
				;//call OptionsScreen
				;//
				;// jmp MainScreen

				;//Clean up Before Exit
 00000063  C7 05 0000000A R	mov cursorInfo.bVisible, TRUE
	   00000001
				INVOKE SetConsoleCursorInfo, consoleHandle, addr cursorInfo

 0000007D			ExitProgram:
				invoke ExitProcess, 0
 00000084			main endp

				;//Procedures
				;//------------------------------------------------------------------------------
 00000084			PrintMaze PROC
				;//
				;// Description: Reads the Map from a file and prints it to the screen
				;// Receives: Nothing
				;// Returns: Nothing
				;//------------------------------------------------------------------------------

 000013A6			.data
 000013A6 6C 65 76 65 6C	fileName byte "level.dat", 0
	   2E 64 61 74 00
 000013B0 00000000		fileHandle HANDLE ?
 00000084			.code
 00000084  E8 00000000 E	call Clrscr
 00000089  BA 000013A6 R	mov edx, OFFSET fileName
 0000008E  E8 00000000 E	call OpenInputFile
 00000093  A3 000013B0 R	mov fileHandle, eax

 00000098  BA 0000000E R	mov edx, OFFSET buffer
 0000009D  B9 00001388		mov ecx, BUFFER_SIZE
 000000A2  E8 00000000 E	call ReadFromFile

				;//clean registers
 000000A7  B9 00000000		mov ecx, 0
 000000AC  B8 00000000		mov eax, 0
 000000B1  BB 00000000		mov ebx, 0

 000000B6  BA 0000000E R	mov edx, OFFSET buffer
 000000BB  B9 00001388		mov ecx, SIZEOF buffer

				;//Setup map size and player location
 000000C0  E8 00000000 E	call WriteString
 000000C5  E8 00000000 E	call Crlf

 000000CA  A1 000013B0 R	mov eax, fileHandle
 000000CF  E8 00000000 E	call CloseFile

 000000D4  C3			ret
 000000D5			PrintMaze ENDP

				;//------------------------------------------------------------------------------
 000000D5			GetValueFromMatrix PROC USES eax ecx edx, 
				matrix: PTR BYTE, coords : COORD, nRows : byte, nCols : byte    
				;//
				;// Description: The Main Game Loop
				;// Uses: 
				;// Receives:
				;// Returns: the value in the array at the location specified in matrix using ebx
				;// Notes: calc row offset
				;//        row = cols * y
				;//        so index = (cols * y) + x
				;//------------------------------------------------------------------------------
 000013B4			.data
 000013B4 00000000		bytesInRow dword ?
 000000DB			.code
 000000DB  33 C0		xor eax, eax;//y || row
 000000DD  33 C9		xor ecx, ecx;//x || cols
 000000DF  33 DB		xor ebx, ebx

 000000E1  0F B7 4D 0C		movzx ecx, (coord ptr coords).X;//col
 000000E5  0F B7 45 0E		movzx eax, (coord ptr coords).Y;//row
 000000E9  F6 65 14		mul nCols;//multiply eax by nCols

 000000EC  03 C8		add ecx, eax
 000000EE  0F B6 1C 0D		movzx ebx, [buffer + 1 * ecx]
	   0000000E R
				ret
 000000FD			GetValueFromMatrix ENDP
main.asm(190) : warning A6004:procedure argument or local not referenced : matrix
main.asm(190) : warning A6004:procedure argument or local not referenced : nRows

				;//------------------------------------------------------------------------------
 000000FD			MainGameLoop PROC
				;//
				;// Description: The Main Game Loop
				;// Uses: 
				;// Receives:
				;// Returns: Nothing
				;//------------------------------------------------------------------------------
 000013B8			.data

 000000FD			.code
 000000FD			GameLoop:

 000000FD  E8 00000003		call GetPlayerInput

 00000102  EB F9		 jmp GameLoop

				;//TODO(nathan): 
				;// Update Clock
				;// get user input
				;// move player
				;// check if at exit
				;// update score

 00000104  C3			ret
 00000105			MainGameLoop ENDP


 00000105			GetPlayerInput PROC USES eax
				LOCAL keyPress : BYTE
 000013B8			.data

 0000010C			.code
 0000010C  C6 45 FF 00		mov keyPress, 0

 00000110  33 C0		xor eax, eax
 00000112  B8 0000000A		mov eax, 10
 00000117  E8 00000000 E	call Delay
 0000011C  E8 00000000 E	call ReadKey

 00000121  88 45 FF		mov keyPress, al

				.IF(keyPress == "s")
 0000012A  66| FF 05		inc FuturePOS.Y
	   00001398 R
				.ELSEIF(keyPress == "w")
 00000139  66| FF 0D		dec FuturePOS.Y
	   00001398 R
				.ELSEIF(keyPress == "d")
 00000148  66| FF 05		inc FuturePOS.X
	   00001396 R
				.ELSEIF(keyPress == "a")
 00000157  66| FF 0D		dec FuturePOS.X
	   00001396 R
				.ENDIF

 0000015E  33 DB		xor ebx, ebx
				invoke GetValueFromMatrix, addr buffer, FuturePOS, mapHeight, mapWidth
				;// check if move is valid

				.IF(ebx != 0 && ebx != 13 && ebx != 12 && ebx != 43 && ebx != 45 && ebx != 124 && keyPress != 1)

 0000019F  E8 00000099		call UpdatePlayerLocation

				.IF(ebx == 126)
				;//Game Over with Exit
				.ELSEIF(ebx == 42);// 157)
 000001B0  83 05 000013A2 R	add score, 15
	   0F
				.ELSEIF(ebx == 234)
 000001C1  83 05 000013A2 R	add score, 10
	   0A
				.ENDIF

				.ElSE
				mCopyCOORD FuturePOS, CurrentPOS
 000001CA  66| 33 C0	     1	xor ax, ax
 000001CD  66| A1	     1	mov ax, (coord ptr CurrentPOS).X
	   0000139A R
 000001D3  66| A3	     1	mov(coord ptr FuturePOS).X, ax
	   00001396 R
 000001D9  66| 33 C0	     1	xor ax, ax
 000001DC  66| A1	     1	mov ax, (coord ptr CurrentPOS).Y
	   0000139C R
 000001E2  66| A3	     1	mov(coord ptr FuturePOS).Y, ax
	   00001398 R

				.ENDIF

				ret
 000001EB			GetPlayerInput ENDP

				;//------------------------------------------------------------------------------
 000001EB			MenuScreen PROC;
				;//
				;// Description: Prints the Main Menu and Reads user input
				;// Uses: 
				;// Receives: Nothing
				;// Returns: AX
				;//------------------------------------------------------------------------------
 000013B8			.data
 000013B8 31 3A 20 50 6C	msgMenu byte "1: Play", 13, 10, "2: Options", 13, 10, "3: Scores", 13, 10, "4: Exit", 13, 10, 0
	   61 79 0D 0A 32
	   3A 20 4F 70 74
	   69 6F 6E 73 0D
	   0A 33 3A 20 53
	   63 6F 72 65 73
	   0D 0A 34 3A 20
	   45 78 69 74 0D
	   0A 00

 000001EB			.code
 000001EB  33 C0		xor eax, eax
 000001ED  33 D2		xor edx, edx

 000001EF  E8 00000000 E	call Clrscr

 000001F4  BA 000013B8 R	mov edx, OFFSET msgMenu
 000001F9  E8 00000000 E	call WriteString
 000001FE  E8 00000000 E	call Crlf
 00000203  E8 00000000 E	call readInt

 00000208  C3			ret
 00000209			MenuScreen ENDP

				;//------------------------------------------------------------------------------
 00000209			ScoreScreen PROC
				;//
				;// Description: Reads and Displays the Scores from a File
				;// Receives: Nothing
				;// Returns: Nothing
				;//------------------------------------------------------------------------------
 000013E2			.data
 000013E2 53 63 6F 72 65	msgScoreTitle byte "Scores: ", 13, 10, 0
	   73 3A 20 0D 0A
	   00

 00000209			.code
 00000209  33 C0		xor eax, eax
 0000020B  33 D2		xor edx, edx

 0000020D  E8 00000000 E	call Clrscr

 00000212  BA 000013E2 R	mov edx, OFFSET msgScoreTitle
 00000217  E8 00000000 E	call WriteString

 0000021C  E8 00000000 E	call WaitMsg
				;/*TODO(Nathan) Task List in order of operations for Score Screen
				 ; *1. Clear Screen
				 ; *2. Read Score File
				 ; *3. Print Scores onto Screen
				 ; *4. Print Options for Return to Main Screen, Clear Score List
				 ; *Notes: Read Player Input here?.
				 ; */
 00000221  C3			ret
 00000222			ScoreScreen ENDP

				;//------------------------------------------------------------------------------
 00000222			SaveScore PROC;
				;//
				;// Description: Saves the Score and Completion Time to a file 
				;// Receives: Nothing
				;// Returns: Nothing
				;//------------------------------------------------------------------------------
 000013ED			.data
 00000222			.code
				;/*TODO(Nathan) Task List in order of operations for SaveScore
				 ; *1. Clear Screen
				 ; *2. Save Score to File
				 ; */
 00000222  C3			ret
 00000223			SaveScore ENDP

				;//------------------------------------------------------------------------------
 00000223			OptionsScreen PROC;
				;//
				;// Description: Displays the Options and Reads Input from the User 
				;//              and Updates global flags
				;// Receives: Nothing
				;// Returns: Nothing
				;//------------------------------------------------------------------------------
 000013ED			.data
 000013ED 4F 70 74 69 6F	msgOptions byte "Options", 0
	   6E 73 00

 00000223			.code
 00000223  33 C0		xor eax, eax
 00000225  33 D2		xor edx, edx

 00000227  E8 00000000 E	call Clrscr

 0000022C  BA 000013ED R	mov edx, OFFSET msgOptions
 00000231  E8 00000000 E	call WriteString

 00000236  E8 00000000 E	call WaitMsg

				;/*TODO(Nathan) Task List in order of operations for Options
				 ; *1. Clear Screen
				 ; *2. Enable Timer
				 ; */
 0000023B  C3			ret
 0000023C			OptionsScreen ENDP

				;//------------------------------------------------------------------------------
 0000023C			UpdateScoreOnScreen proc
				 
				;//
				;// Description:
				;// Uses:
				;// Receives:
				;// Returns:
				;//------------------------------------------------------------------------------


 0000023C  C3			ret
 0000023D			UpdateScoreOnScreen endp

				;//------------------------------------------------------------------------------
 0000023D			UpdatePlayerLocation PROC
				;//
				;// Description: Don't Know May Not Be Used;
				;// Receives: Nothing
				;// Returns: Nothing
				;//------------------------------------------------------------------------------
 000013F5			.data
 0000023D			.code
 0000023D  33 C0		xor eax, eax

				;//Draw Player
				INVOKE SetConsoleCursorPosition, consoleHandle, CurrentPOS
 00000250  B0 20		mov al, " "
 00000252  E8 00000000 E	call WriteChar

				mCopyCOORD CurrentPOS, FuturePOS
 00000257  66| 33 C0	     1	xor ax, ax
 0000025A  66| A1	     1	mov ax, (coord ptr FuturePOS).X
	   00001396 R
 00000260  66| A3	     1	mov(coord ptr CurrentPOS).X, ax
	   0000139A R
 00000266  66| 33 C0	     1	xor ax, ax
 00000269  66| A1	     1	mov ax, (coord ptr FuturePOS).Y
	   00001398 R
 0000026F  66| A3	     1	mov(coord ptr CurrentPOS).Y, ax
	   0000139C R

				INVOKE SetConsoleCursorPosition, consoleHandle, CurrentPOS
 00000286  B0 DB		mov al, 0DBh;//player char box thing
 00000288  E8 00000000 E	call WriteChar

 0000028D  C3			ret
 0000028E			UpdatePlayerLocation ENDP

				end main
Microsoft (R) Macro Assembler Version 12.00.30501.0	    09/24/15 21:58:13
main.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mCopyCOORD . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000013F5 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000028E Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetPlayerInput . . . . . . . . .	P Near	 00000105 _TEXT	Length= 000000E6 Public STDCALL
  keyPress . . . . . . . . . . .	Byte	 bp - 00000001
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetValueFromMatrix . . . . . . .	P Near	 000000D5 _TEXT	Length= 00000028 Public STDCALL
  matrix . . . . . . . . . . . .	DWord	 bp + 00000008
  coords . . . . . . . . . . . .	DWord	 bp + 0000000C
  nRows  . . . . . . . . . . . .	Byte	 bp + 00000010
  nCols  . . . . . . . . . . . .	Byte	 bp + 00000014
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MainGameLoop . . . . . . . . . .	P Near	 000000FD _TEXT	Length= 00000008 Public STDCALL
  GameLoop . . . . . . . . . . .	L Near	 000000FD _TEXT	
MenuScreen . . . . . . . . . . .	P Near	 000001EB _TEXT	Length= 0000001E Public STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OptionsScreen  . . . . . . . . .	P Near	 00000223 _TEXT	Length= 00000019 Public STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PrintMaze  . . . . . . . . . . .	P Near	 00000084 _TEXT	Length= 00000051 Public STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SaveScore  . . . . . . . . . . .	P Near	 00000222 _TEXT	Length= 00000001 Public STDCALL
ScoreScreen  . . . . . . . . . .	P Near	 00000209 _TEXT	Length= 00000019 Public STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
UpdatePlayerLocation . . . . . .	P Near	 0000023D _TEXT	Length= 00000051 Public STDCALL
UpdateScoreOnScreen  . . . . . .	P Near	 0000023C _TEXT	Length= 00000001 Public STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000084 Public STDCALL
  ExitProgram  . . . . . . . . .	L Near	 0000007D _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BUFFER_SIZE  . . . . . . . . . .	Number	 00001388h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
CurrentPOS . . . . . . . . . . .	COORD	 0000139A _DATA	
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
FuturePOS  . . . . . . . . . . .	COORD	 00001396 _DATA	
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
ScorePOS . . . . . . . . . . . .	COORD	 0000139E _DATA	
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	Byte	 0000000E _DATA	
bytesInRow . . . . . . . . . . .	DWord	 000013B4 _DATA	
consoleHandle  . . . . . . . . .	DWord	 00000002 _DATA	
cursorInfo . . . . . . . . . . .	CONSOLE_CURSOR_INFO  00000006 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileHandle . . . . . . . . . . .	DWord	 000013B0 _DATA	
fileName . . . . . . . . . . . .	Byte	 000013A6 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
mapHeight  . . . . . . . . . . .	Byte	 00000001 _DATA	
mapWidth . . . . . . . . . . . .	Byte	 00000000 _DATA	
msgMenu  . . . . . . . . . . . .	Byte	 000013B8 _DATA	
msgOptions . . . . . . . . . . .	Byte	 000013ED _DATA	
msgScoreTitle  . . . . . . . . .	Byte	 000013E2 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
score  . . . . . . . . . . . . .	DWord	 000013A2 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   3 Warnings
	   1 Errors
