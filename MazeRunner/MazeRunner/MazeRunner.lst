Microsoft (R) Macro Assembler Version 12.00.30501.0	    09/30/15 16:52:26
main.asm						     Page 1 - 1


				;/* ---------------------------------------------------------------------------
				;** File: main.asm
				;** Description: Maze Runner Game for Final Project in CSPG360
				;**              Computer Organization and Assembly Language
				;** Author: Nathan Bremmer
				;** -------------------------------------------------------------------------*/

				;//Things left to do
				;//1: reset player POS on start of game
				;//2: Save Scores to text file
				;//3: Read Scores from text file
				;//4: randomly place scoring object on map
				;//Optional if we have time
				;//1:Options Menu
				;// a: turn off scoring objects
				;// b: set time limit

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE macros.inc
			      C .NOLIST
			      C .LIST
			      C 

				.386
				.model flat, stdcall
main.asm(22) : warning A4011:multiple .MODEL directives found : .MODEL ignored
				.stack 4096

				;//Prototypes
				ExitProcess proto, dwExitCode:dword
				GetValueFromMatrix proto matrix : PTR BYTE, cords : COORD, nRows : byte, nCols : byte

				;//Constants
 = 00001388			BUFFER_SIZE = 5000

 00000000			.data

				;//Console Variables
 00000000 4D 61 7A 65 20	consoleTitle byte "Maze Runner", 0
	   52 75 6E 6E 65
	   72 00
 0000000C 00000000		consoleHandle DWORD ?
 00000010 00000000		cursorInfo CONSOLE_CURSOR_INFO <>
	   00000000

				;//Map data
 00000018 17			mapWidth BYTE 23
 00000019 14			mapHeight BYTE 20

				;//Player data - x, y
				ALIGN WORD
 0000001A 0000 0001		FuturePOS COORD <0,1>
				ALIGN WORD
 0000001E 0000 0001		CurrentPOS COORD <0,1>
				ALIGN WORD
 00000022 0000 0000		ScorePOS COORD <0,0>
				ALIGN WORD 
 00000026 0000 0000		TimerPOS COORD <0,0>


				;//game info
 0000002A 54 69 6D 65 20	msgTiming byte "Time Remaining: ", 0
	   52 65 6D 61 69
	   6E 69 6E 67 3A
	   20 00
 0000003B 00000000		timeStart DWORD 0
 0000003F 00000000		timePrev DWORD 0
 00000043 00000000		timeElapsed DWORD 0
 00000047 00000000		timeRemaining DWORD 0
 0000004B 00000000		maxTime DWORD 0
 0000004F 53 63 6F 72 65	msgScore byte "Score: ", 0
	   3A 20 00
 00000057 00000000		score dword 0

				;//File Info
 0000005B 73 63 6F 72 65	scoreFileName byte "scores.dat", 0
	   73 2E 64 61 74
	   00
 00000066 48 65 6C 70 46	helpFileName byte "HelpFile.dat", 0
	   69 6C 65 2E 64
	   61 74 00
 00000073 6C 65 76 65 6C	levelfileName byte "level.dat", 0
	   2E 64 61 74 00

 0000007D			fileBuffer Byte BUFFER_SIZE DUP(? )
 00001405			levelBuffer Byte BUFFER_SIZE DUP(? )
 0000278D 00000000		helpFileHandle HANDLE ?
 00002791 00000000		fileHandle HANDLE ?
 00000000			.code

				;//MACROS
				;//------------------------------------------------------------------------------
				mCopyCOORD MACRO destCOORD:req, sourceCOORD:req
				;//
				;// Description: Copies the values of one COORD struct to another
				;// Avoid Using ax
				;// Receives: a destination coord and a source coord struct; 
				;// Returns: Nothing
				;//------------------------------------------------------------------------------
				push ax

				xor ax, ax
				mov ax, (coord ptr sourceCOORD).X
				mov(coord ptr destCOORD).X, ax

				xor ax, ax
				mov ax, (coord ptr sourceCOORD).Y
				mov(coord ptr destCOORD).Y, ax

				pop ax
				ENDM

				;//------------------------------------------------------------------------------
				mPrintAtLocation MACRO message : req, coords : req, color : req, optionalIntValue
				LOCAL currentTextColor
				;//
				;// Description: prints a string in the specified color at the specified location
				;//              if an optionalIntValue is included print it after the message
				;// Avoid Using: eax, edx
				;// Receives:Message, coords, color, optional Value
				;// Returns:Nothing
				;//------------------------------------------------------------------------------
				.data
				currentTextColor DWORD ?
				.code
				push eax
				push edx

				INVOKE SetConsoleCursorPosition, consoleHandle, coords
				mWrite "                                             ", 0;//shady hack that should be fixed.
				INVOKE SetConsoleCursorPosition, consoleHandle, coords

				call GetTextColor
				mov currentTextColor, eax

				mov eax, color
				call SetTextColor

				mov edx, offset message
				call WriteString

				IFNB < optionalIntValue >
				xor eax,eax
				mov eax, optionalIntValue
				call WriteInt
				ENDIF

				mov eax, currentTextColor
				call SetTextColor

				pop edx
				pop eax
				ENDM

				;//------------------------------------------------------------------------------
 00000000			main proc
				;//
				;// Description: Main Application Entry Point
				;// Receives: Nothing
				;// Returns: Nothing
				;//------------------------------------------------------------------------------

				;//Init
				INVOKE GetStdHandle, STD_OUTPUT_HANDLE
 00000007  A3 0000000C R	mov consoleHandle, eax
				INVOKE GetConsoleCursorInfo, consoleHandle, addr cursorInfo
 0000001C  C7 05 00000014 R	mov cursorInfo.bVisible, FALSE
	   00000000
				INVOKE SetConsoleCursorInfo, consoleHandle, addr cursorInfo

				INVOKE SetConsoleTitle, addr consoleTitle

 00000040  C7 05 00000057 R	mov score, 0
	   00000000
 0000004A  66| 33 C0		xor ax, ax
 0000004D  66| 0F B6 05		movzx ax, mapWidth
	   00000018 R
 00000055  66| 83 C0 01		add ax, 1
 00000059  66| A3		mov ScorePOS.X, ax
	   00000022 R
 0000005F  66| C7 05		mov ScorePOS.Y, 2
	   00000024 R
	   0002

 00000068  66| A3		mov TimerPOS.X, ax
	   00000026 R
 0000006E  66| C7 05		mov TimerPOS.Y, 1
	   00000028 R
	   0001

				;//End Init

				;// call SaveScore



 00000077			MainScreen:
 00000077  33 C0		xor eax,eax
 00000079  E8 0000050A		call MenuScreen

 0000007E  66| 83 F8 01		cmp ax, 1
 00000082  74 25		jz StartGame
 00000084  66| 83 F8 02		cmp ax, 2
 00000088  74 26		jz ShowScore
 0000008A  66| 83 F8 03		cmp ax, 3
 0000008E  74 08		jz Help
 00000090  66| 83 F8 04		cmp ax, 4
 00000094  74 3B		jz ExitProgram

 00000096  EB DF		jmp MainScreen


 00000098			Help:
 00000098  E8 000000E8		call PrintHelpFile
 0000009D  E8 00000000 E	call Crlf
 000000A2  E8 00000000 E	call WaitMsg
 000000A7  EB CE		jmp MainScreen

 000000A9			StartGame:
 000000A9  E8 0000015B		call MainGameLoop
 000000AE  EB C7		jmp MainScreen

 000000B0			ShowScore:
 000000B0  E8 000004F3		call ScoreScreen
 000000B5  EB C0		jmp MainScreen

				;//Clean up Before Exit
 000000B7  C7 05 00000014 R	mov cursorInfo.bVisible, TRUE
	   00000001
				INVOKE SetConsoleCursorInfo, consoleHandle, addr cursorInfo

 000000D1			ExitProgram:
				invoke ExitProcess, 0
 000000D8			main endp

				;//Procedures

				;//------------------------------------------------------------------------------
 000000D8			PrintScores PROC USES edx ecx eax ebx
				;//
				;// Description: Reads the Score file and prints it to the screen.
				;// Uses: edx, ecx, eax, and ebx
				;// Receives: Nothing
				;// Returns: array stored in fileBuffer
				;//------------------------------------------------------------------------------

 000000DC			.code
 000000DC  BA 0000005B R	mov edx, OFFSET scoreFileName
 000000E1  E8 00000000 E	call OpenInputFile
 000000E6  A3 00002791 R	mov fileHandle, eax

 000000EB  BA 0000007D R	mov edx, OFFSET fileBuffer
 000000F0  B9 00001388		mov ecx, BUFFER_SIZE
 000000F5  E8 00000000 E	call ReadFromFile

				;//clean registers
 000000FA  B9 00000000		mov ecx, 0
 000000FF  B8 00000000		mov eax, 0
 00000104  BB 00000000		mov ebx, 0

 00000109  BA 0000007D R	mov edx, OFFSET fileBuffer
 0000010E  B9 00001388		mov ecx, SIZEOF fileBuffer

				;//Setup map size and player location
 00000113  E8 00000000 E	call WriteString
 00000118  E8 00000000 E	call Crlf

 0000011D  A1 00002791 R	mov eax, fileHandle
 00000122  E8 00000000 E	call CloseFile

				ret
 0000012C			PrintScores ENDP

				;//------------------------------------------------------------------------------
 0000012C			PrintMaze PROC USES edx ecx eax ebx
				;//
				;// Description: Reads the Maze Map data file and prints it to the screen.
				;// Uses: edx, ecx, eax, and ebx
				;// Receives: Nothing
				;// Returns: array stored in levelBuffer
				;//------------------------------------------------------------------------------

 00000130			.code
 00000130  E8 00000000 E	call Clrscr
 00000135  BA 00000073 R	mov edx, OFFSET levelfileName
 0000013A  E8 00000000 E	call OpenInputFile
 0000013F  A3 00002791 R	mov fileHandle, eax

 00000144  BA 00001405 R	mov edx, OFFSET levelBuffer
 00000149  B9 00001388		mov ecx, BUFFER_SIZE
 0000014E  E8 00000000 E	call ReadFromFile

				;//clean registers
 00000153  B9 00000000		mov ecx, 0
 00000158  B8 00000000		mov eax, 0
 0000015D  BB 00000000		mov ebx, 0

 00000162  BA 00001405 R	mov edx, OFFSET levelBuffer
 00000167  B9 00001388		mov ecx, SIZEOF levelBuffer

				;//Setup map size and player location
 0000016C  E8 00000000 E	call WriteString
 00000171  E8 00000000 E	call Crlf

 00000176  A1 00002791 R	mov eax, fileHandle
 0000017B  E8 00000000 E	call CloseFile

				ret
 00000185			PrintMaze ENDP

				;//------------------------------------------------------------------------------
 00000185			PrintHelpFile PROC USES edx ecx eax ebx
				;//
				;// Description: Reads the help file into a buffer array and prints it to the screen
				;// Uses: edx, ecx, eax, and ebx
				;// Receives: Nothing
				;// Returns: array stored in fileBuffer
				;//------------------------------------------------------------------------------
 00000189			.code
 00000189  E8 00000000 E	call Clrscr
 0000018E  BA 00000066 R	mov edx, OFFSET helpFileName
 00000193  E8 00000000 E	call OpenInputFile
 00000198  A3 0000278D R	mov helpFileHandle, eax

 0000019D  BA 0000007D R	mov edx, OFFSET fileBuffer
 000001A2  B9 00001388		mov ecx, BUFFER_SIZE
 000001A7  E8 00000000 E	call ReadFromFile

				;//clean registers
 000001AC  B9 00000000		mov ecx, 0
 000001B1  B8 00000000		mov eax, 0
 000001B6  BB 00000000		mov ebx, 0

 000001BB  BA 0000007D R	mov edx, OFFSET fileBuffer
 000001C0  B9 00001388		mov ecx, SIZEOF fileBuffer

				;//Setup map size and player location
 000001C5  E8 00000000 E	call WriteString
 000001CA  E8 00000000 E	call Crlf

 000001CF  A1 0000278D R	mov eax, helpFileHandle
 000001D4  E8 00000000 E	call CloseFile

				ret
 000001DE			PrintHelpFile ENDP

				;//------------------------------------------------------------------------------
 000001DE			GetValueFromMatrix PROC USES eax ecx edx, 
				matrix: PTR BYTE, coords : COORD, nRows : byte, nCols : byte
				    LOCAL baseAddress : BYTE
				;//
				;// Description: The Main Game Loop
				;// Uses: eax, ecx, edx
				;// Receives: a Pointer to COORDs, nRows and, NCols
				;// Returns: the value in the array at the location specified in matrix using ebx
				;//------------------------------------------------------------------------------
 00002795			.data
 00002795 00000000		bytesInRow dword ?
 000001E7			.code
 000001E7  33 C0		xor eax, eax;//y || row
 000001E9  33 C9		xor ecx, ecx;//x || col
 000001EB  33 DB		xor ebx, ebx

 000001ED  0F B7 4D 0C		movzx ecx, (coord ptr coords).X;//col
 000001F1  0F B7 45 0E		movzx eax, (coord ptr coords).Y;//row
 000001F5  F6 65 14		mul nCols;//multiply eax by nCols

 000001F8  03 C8		add ecx, eax
 000001FA  0F B6 1C 0D		movzx ebx, [levelBuffer + 1 * ecx]
	   00001405 R
				ret
 00000209			GetValueFromMatrix ENDP
main.asm(345) : warning A6004:procedure argument or local not referenced : matrix
main.asm(345) : warning A6004:procedure argument or local not referenced : nRows
main.asm(345) : warning A6004:procedure argument or local not referenced : baseAddress

				;//------------------------------------------------------------------------------
 00000209			MainGameLoop PROC USES eax
				;//
				;// Description: The Main Game Loop
				;// Uses: eax
				;// Receives: Nothing
				;// Returns: value stored in gameOver variable as a 1 or 0
				;//------------------------------------------------------------------------------
 00002799			.data

 0000020A			.code
				;// TODO(Nathan): Need to default COORS for current and future player POS for each new game

 0000020A  E8 FFFFFF1D		call PrintMaze

				;//Start Game Time
 0000020F  C7 05 00000043 R	mov timeElapsed, 0
	   00000000
 00000219  C7 05 0000003B R	mov timeStart, 0
	   00000000
 00000223  C7 05 0000003F R	mov timePrev, 0
	   00000000
 0000022D  C7 05 0000004B R	mov maxTime, 40
	   00000028
 00000237  C7 05 00000047 R	mov timeRemaining, 40
	   00000028
 00000241  E8 00000000 E	call GetMSeconds
 00000246  A3 0000003B R	mov timeStart, eax

				;//Draw starting information on screen before entering game loop
				mPrintAtLocation msgScore, ScorePOS, white, score
 00002799		     1	.data
 00002799 00000000	     1	??0000 DWORD ?
 0000024B		     1	.code
 0000024B  50		     1	push eax
 0000024C  52		     1	push edx
			     2	;
main.asm(372) : warning A4006:too many arguments in macro call
 mWrite(1): Macro Called From
  mPrintAtLocation(16): Macro Called From
   main.asm(372): Main Line Code
 0000279D		     2		.data		
 0000279D 20 20 20 20 20     2		??0001 BYTE "                                             ",0	
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   00
 0000025E		     2		.code
 0000025E  52		     2		push	edx
 0000025F  BA 0000279D R     2		mov	edx,OFFSET ??0001
 00000264  E8 00000000 E     2		call	WriteString
 00000269  5A		     2		pop	edx
 0000027B  E8 00000000 E     1	call GetTextColor
 00000280  A3 00002799 R     1	mov ??0000, eax
 00000285  B8 0000000F	     1	mov eax, white
 0000028A  E8 00000000 E     1	call SetTextColor
 0000028F  BA 0000004F R     1	mov edx, offset msgScore
 00000294  E8 00000000 E     1	call WriteString
 00000299  33 C0	     1	xor eax,eax
 0000029B  A1 00000057 R     1	mov eax, score
 000002A0  E8 00000000 E     1	call WriteInt
 000002A5  A1 00002799 R     1	mov eax, ??0000
 000002AA  E8 00000000 E     1	call SetTextColor
 000002AF  5A		     1	pop edx
 000002B0  58		     1	pop eax
				mPrintAtLocation msgTiming, TimerPOS, white
 000027CB		     1	.data
 000027CB 00000000	     1	??0002 DWORD ?
 000002B1		     1	.code
 000002B1  50		     1	push eax
 000002B2  52		     1	push edx
			     2	;
main.asm(373) : warning A4006:too many arguments in macro call
 mWrite(1): Macro Called From
  mPrintAtLocation(16): Macro Called From
   main.asm(373): Main Line Code
 000027CF		     2		.data		
 000027CF 20 20 20 20 20     2		??0003 BYTE "                                             ",0	
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   00
 000002C4		     2		.code
 000002C4  52		     2		push	edx
 000002C5  BA 000027CF R     2		mov	edx,OFFSET ??0003
 000002CA  E8 00000000 E     2		call	WriteString
 000002CF  5A		     2		pop	edx
 000002E1  E8 00000000 E     1	call GetTextColor
 000002E6  A3 000027CB R     1	mov ??0002, eax
 000002EB  B8 0000000F	     1	mov eax, white
 000002F0  E8 00000000 E     1	call SetTextColor
 000002F5  BA 0000002A R     1	mov edx, offset msgTiming
 000002FA  E8 00000000 E     1	call WriteString
 000002FF  A1 000027CB R     1	mov eax, ??0002
 00000304  E8 00000000 E     1	call SetTextColor
 00000309  5A		     1	pop edx
 0000030A  58		     1	pop eax

 0000030B  E8 000003EE		call UpdatePlayerLocation

 00000310			GameLoop:
 00000310  33 DB		xor ebx, ebx
 00000312  E8 000000F6		call GetPlayerInput

 00000317  83 FB 01		cmp ebx, 1
 0000031A  74 2D		jz Win

 0000031C  E8 00000047		call UpdateTimer
 00000321  83 3D 00000047 R	cmp timeRemaining, 0
	   00
 00000328  74 02		jz GameOver

 0000032A  EB E4		jmp GameLoop

 0000032C			GameOver :
 0000032C  E8 00000000 E	call Clrscr
				mWrite "Game Over, you ran out of time", 13, 10, 0
			     1	;
main.asm(392) : warning A4006:too many arguments in macro call
 mWrite(1): Macro Called From
  main.asm(392): Main Line Code
 000027FD		     1		.data		
 000027FD 47 61 6D 65 20     1		??0004 BYTE "Game Over, you ran out of time",0	
	   4F 76 65 72 2C
	   20 79 6F 75 20
	   72 61 6E 20 6F
	   75 74 20 6F 66
	   20 74 69 6D 65
	   00
 00000331		     1		.code
 00000331  52		     1		push	edx
 00000332  BA 000027FD R     1		mov	edx,OFFSET ??0004
 00000337  E8 00000000 E     1		call	WriteString
 0000033C  5A		     1		pop	edx
 0000033D  E8 00000000 E	call Crlf
 00000342  E8 00000000 E	call WaitMsg
 00000347  EB 1D		jmp quit

 00000349			Win:
 00000349  E8 00000000 E	call Clrscr
				mWrite "you win, we'll do things here later like saving scores", 13, 10, 0;//TODO(Nathan): implement saving of scores
			     1	;
main.asm(399) : warning A4006:too many arguments in macro call
 mWrite(1): Macro Called From
  main.asm(399): Main Line Code
 0000281C		     1		.data		
 0000281C 79 6F 75 20 77     1		??0005 BYTE "you win, we'll do things here later like saving scores",0	
	   69 6E 2C 20 77
	   65 27 6C 6C 20
	   64 6F 20 74 68
	   69 6E 67 73 20
	   68 65 72 65 20
	   6C 61 74 65 72
	   20 6C 69 6B 65
	   20 73 61 76 69
	   6E 67 20 73 63
	   6F 72 65 73 00
 0000034E		     1		.code
 0000034E  52		     1		push	edx
 0000034F  BA 0000281C R     1		mov	edx,OFFSET ??0005
 00000354  E8 00000000 E     1		call	WriteString
 00000359  5A		     1		pop	edx
 0000035A  E8 00000000 E	call Crlf
 0000035F  E8 00000000 E	call WaitMsg
 00000364  EB 00		jmp quit

 00000366			quit:
				ret
 00000368			MainGameLoop ENDP

				;//------------------------------------------------------------------------------
 00000368			UpdateTimer proc USES eax ebx edx
				;//
				;// Description: Updates the Timer in game
				;// Uses: eax ebx edx
				;// Receives: Nothing
				;// Returns: Nothing
				;//------------------------------------------------------------------------------

 0000036B  A1 00000043 R	mov eax, timeElapsed
 00000370  A3 0000003F R	mov timePrev, eax

 00000375  E8 00000000 E	call GetMSeconds
 0000037A  2B 05 0000003B R	sub eax, timeStart
 00000380  BA 00000000		mov edx, 0
 00000385  BB 000003E8		mov ebx, 1000
 0000038A  F7 F3		div ebx

 0000038C  A3 00000043 R	mov timeElapsed, eax

 00000391  8B 1D 0000004B R	mov ebx, maxTime

 00000397  2B 1D 00000043 R	sub ebx, timeElapsed

 0000039D  89 1D 00000047 R	mov timeRemaining, ebx

				mPrintAtLocation msgtiming, TimerPOS, white, timeRemaining
 00002853		     1	.data
 00002853 00000000	     1	??0006 DWORD ?
 000003A3		     1	.code
 000003A3  50		     1	push eax
 000003A4  52		     1	push edx
			     2	;
main.asm(434) : warning A4006:too many arguments in macro call
 mWrite(1): Macro Called From
  mPrintAtLocation(16): Macro Called From
   main.asm(434): Main Line Code
 00002857		     2		.data		
 00002857 20 20 20 20 20     2		??0007 BYTE "                                             ",0	
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   00
 000003B6		     2		.code
 000003B6  52		     2		push	edx
 000003B7  BA 00002857 R     2		mov	edx,OFFSET ??0007
 000003BC  E8 00000000 E     2		call	WriteString
 000003C1  5A		     2		pop	edx
 000003D3  E8 00000000 E     1	call GetTextColor
 000003D8  A3 00002853 R     1	mov ??0006, eax
 000003DD  B8 0000000F	     1	mov eax, white
 000003E2  E8 00000000 E     1	call SetTextColor
 000003E7  BA 0000002A R     1	mov edx, offset msgtiming
 000003EC  E8 00000000 E     1	call WriteString
 000003F1  33 C0	     1	xor eax,eax
 000003F3  A1 00000047 R     1	mov eax, timeRemaining
 000003F8  E8 00000000 E     1	call WriteInt
 000003FD  A1 00002853 R     1	mov eax, ??0006
 00000402  E8 00000000 E     1	call SetTextColor
 00000407  5A		     1	pop edx
 00000408  58		     1	pop eax
				ret
 0000040D			UpdateTimer endp

				;//------------------------------------------------------------------------------
 0000040D			GetPlayerInput PROC USES eax
				LOCAL keyPress : BYTE
				;//
				;// Description: Gets the players Input then updates the character POS, Score and
				;//              and timer on the screen
				;// Uses: eax
				;// Receives: Nothing
				;// Returns: value stored in gameOver variable as a 1 or 0
				;//------------------------------------------------------------------------------
 00002885			.data

 00000414			.code
 00000414  C6 45 FF 00		mov keyPress, 0

 00000418  33 C0		xor eax, eax
 0000041A  B8 0000000A		mov eax, 10
 0000041F  E8 00000000 E	call Delay
 00000424  E8 00000000 E	call ReadKey

 00000429  88 45 FF		mov keyPress, al

				.IF(keyPress == "s")
 00000432  66| FF 05		inc FuturePOS.Y
	   0000001C R
				.ELSEIF(keyPress == "w")
 00000441  66| FF 0D		dec FuturePOS.Y
	   0000001C R
				.ELSEIF(keyPress == "d")
 00000450  66| FF 05		inc FuturePOS.X
	   0000001A R
				.ELSEIF(keyPress == "a")
 0000045F  66| FF 0D		dec FuturePOS.X
	   0000001A R
				.ENDIF

 00000466  33 DB		xor ebx, ebx
				invoke GetValueFromMatrix, addr levelBuffer, FuturePOS, mapHeight, mapWidth

				;//Check if Move is valid
				.IF(ebx != 0 && ebx != 13 && ebx != 12 && ebx != 43 && ebx != 45 && ebx != 124 && keyPress != 1)

 000004C3  E8 00000236		call UpdatePlayerLocation

				.IF(ebx == 126)
 000004CD  BB 00000001		    mov ebx, 1
 000004D2  E9 000000AE		    jmp Quit
				.ELSEIF(ebx == 42);// 157)
 000004DE  83 05 00000057 R	    add score, 15
	   0F
				.ELSEIF(ebx == 234)
 000004EF  83 05 00000057 R	    add score, 10
	   0A
				.ENDIF

				mPrintAtLocation msgScore, ScorePOS, white, score
 000004F6 000004F6 000004F6 00002885  1	.data
 00002885 00000000	     1	??0008 DWORD ?
 000004F6		     1	.code
 000004F6  50		     1	push eax
 000004F7  52		     1	push edx
			     2	;
main.asm(487) : warning A4006:too many arguments in macro call
 mWrite(1): Macro Called From
  mPrintAtLocation(16): Macro Called From
   main.asm(487): Main Line Code
 00002889		     2		.data		
 00002889 20 20 20 20 20     2		??0009 BYTE "                                             ",0	
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   00
 00000509		     2		.code
 00000509  52		     2		push	edx
 0000050A  BA 00002889 R     2		mov	edx,OFFSET ??0009
 0000050F  E8 00000000 E     2		call	WriteString
 00000514  5A		     2		pop	edx
 00000526  E8 00000000 E     1	call GetTextColor
 0000052B  A3 00002885 R     1	mov ??0008, eax
 00000530  B8 0000000F	     1	mov eax, white
 00000535  E8 00000000 E     1	call SetTextColor
 0000053A  BA 0000004F R     1	mov edx, offset msgScore
 0000053F  E8 00000000 E     1	call WriteString
 00000544  33 C0	     1	xor eax,eax
 00000546  A1 00000057 R     1	mov eax, score
 0000054B  E8 00000000 E     1	call WriteInt
 00000550  A1 00002885 R     1	mov eax, ??0008
 00000555  E8 00000000 E     1	call SetTextColor
 0000055A  5A		     1	pop edx
 0000055B  58		     1	pop eax

				.ElSE
				mCopyCOORD FuturePOS, CurrentPOS
 0000055E  66| 50	     1	push ax
 00000560  66| 33 C0	     1	xor ax, ax
 00000563  66| A1	     1	mov ax, (coord ptr CurrentPOS).X
	   0000001E R
 00000569  66| A3	     1	mov(coord ptr FuturePOS).X, ax
	   0000001A R
 0000056F  66| 33 C0	     1	xor ax, ax
 00000572  66| A1	     1	mov ax, (coord ptr CurrentPOS).Y
	   00000020 R
 00000578  66| A3	     1	mov(coord ptr FuturePOS).Y, ax
	   0000001C R
 0000057E  66| 58	     1	pop ax

				.ENDIF

 00000580  BB 00000000		mov ebx, 0

 00000585			Quit:
				ret
 00000588			GetPlayerInput ENDP

				;//------------------------------------------------------------------------------
 00000588			MenuScreen PROC USES edx
				;//
				;// Description: Prints the Main Menu and Reads user input
				;// Uses: edx
				;// Receives: Nothing
				;// Returns: player menu choice stored in AX
				;//------------------------------------------------------------------------------
 000028B7			.data
 000028B7 31 3A 20 50 6C	msgMenu byte "1: Play", 13, 10, "2: Scores", 13, 10, "3: Help", 13, 10, "4: Exit", 13, 10, 0
	   61 79 0D 0A 32
	   3A 20 53 63 6F
	   72 65 73 0D 0A
	   33 3A 20 48 65
	   6C 70 0D 0A 34
	   3A 20 45 78 69
	   74 0D 0A 00

 00000589			.code
 00000589  33 C0		xor eax, eax
 0000058B  33 D2		xor edx, edx

 0000058D  E8 00000000 E	call Clrscr

 00000592  BA 000028B7 R	mov edx, OFFSET msgMenu
 00000597  E8 00000000 E	call WriteString
 0000059C  E8 00000000 E	call Crlf
 000005A1  E8 00000000 E	call readInt

				ret
 000005A8			MenuScreen ENDP

				;//------------------------------------------------------------------------------
 000005A8			ScoreScreen PROC USES eax edx
				;//
				;// Description: Reads and Displays the Scores from a File
				;// Uses: eax and edx
				;// Receives: Nothing
				;// Returns: Nothing
				;//------------------------------------------------------------------------------
 000028DE			.data
 000028DE 53 63 6F 72 65	msgScoreTitle byte "Scores: ", 13, 10, 0
	   73 3A 20 0D 0A
	   00

 000005AA			.code
 000005AA  33 C0		xor eax, eax
 000005AC  33 D2		xor edx, edx

 000005AE  E8 00000000 E	call Clrscr

 000005B3  BA 000028DE R	mov edx, OFFSET msgScoreTitle
 000005B8  E8 00000000 E	call WriteString
 000005BD  E8 00000000 E	call Crlf

 000005C2  E8 FFFFFB11		call PrintScores

 000005C7  E8 00000000 E	call WaitMsg
				;/*TODO(Nathan) Task List in order of operations for Score Screen
				 ; *1. Clear Screen
				 ; *2. Read Score File
				 ; *3. Print Scores onto Screen
				 ; *4. Print Options for Return to Main Screen
				 ; */
				ret
 000005CF			ScoreScreen ENDP

				;//------------------------------------------------------------------------------
 000005CF			SaveScore PROC USES edx ecx eax ebx
				;//
				;// Description: Saves the Score and Completion Time to a file 
				;// Uses:
				;// Receives: name, score and, time remaining
				;// Returns: Nothing
				;//------------------------------------------------------------------------------
 000028E9			.data
 000028E9 00000000		scoreSaveFileHandle Handle ?
 000028ED 00000000		stringLength dword ?

 000005D3			.code

				;//set cursor visible so that user can see where they are typing 
 000005D3  C7 05 00000014 R	mov cursorInfo.bVisible, TRUE
	   00000001
				INVOKE SetConsoleCursorInfo, consoleHandle, addr cursorInfo


 000005ED  E8 00000000 E	call Clrscr

				mWrite "Congratulations on wining!"
 000028F1		     1		.data		
 000028F1 43 6F 6E 67 72     1		??000A BYTE "Congratulations on wining!",0	
	   61 74 75 6C 61
	   74 69 6F 6E 73
	   20 6F 6E 20 77
	   69 6E 69 6E 67
	   21 00
 000005F2		     1		.code
 000005F2  52		     1		push	edx
 000005F3  BA 000028F1 R     1		mov	edx,OFFSET ??000A
 000005F8  E8 00000000 E     1		call	WriteString
 000005FD  5A		     1		pop	edx
 000005FE  E8 00000000 E	call Crlf
				mWrite "score: "
 0000290C		     1		.data		
 0000290C 73 63 6F 72 65     1		??000B BYTE "score: ",0	
	   3A 20 00
 00000603		     1		.code
 00000603  52		     1		push	edx
 00000604  BA 0000290C R     1		mov	edx,OFFSET ??000B
 00000609  E8 00000000 E     1		call	WriteString
 0000060E  5A		     1		pop	edx
				;//TODO(Nathan): Print Score
 0000060F  E8 00000000 E	call Crlf
				mWrite "Time Remaining: "
 00002914		     1		.data		
 00002914 54 69 6D 65 20     1		??000C BYTE "Time Remaining: ",0	
	   52 65 6D 61 69
	   6E 69 6E 67 3A
	   20 00
 00000614		     1		.code
 00000614  52		     1		push	edx
 00000615  BA 00002914 R     1		mov	edx,OFFSET ??000C
 0000061A  E8 00000000 E     1		call	WriteString
 0000061F  5A		     1		pop	edx
				;//TODO(Nathan): Print Time Remaining.
 00000620  E8 00000000 E	call Crlf

				;//Get user input
				mWrite "Please Enter a Name: "
 00002925		     1		.data		
 00002925 50 6C 65 61 73     1		??000D BYTE "Please Enter a Name: ",0	
	   65 20 45 6E 74
	   65 72 20 61 20
	   4E 61 6D 65 3A
	   20 00
 00000625		     1		.code
 00000625  52		     1		push	edx
 00000626  BA 00002925 R     1		mov	edx,OFFSET ??000D
 0000062B  E8 00000000 E     1		call	WriteString
 00000630  5A		     1		pop	edx
 00000631  B9 00001388		mov ecx, BUFFER_SIZE
 00000636  BA 0000007D R	mov edx, OFFSET fileBuffer
 0000063B  E8 00000000 E	call ReadString
 00000640  A3 000028ED R	mov stringLength, eax


				;// open file for writing Note:(Nathan): Had to do it this way as existing library doesn't allow for appending of file
				INVOKE CreateFile, ADDR scoreFileName, GENERIC_WRITE, DO_NOT_SHARE, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0

 00000661  A3 000028E9 R	mov scoreSaveFileHandle, eax
				.IF(eax == INVALID_HANDLE_VALUE)
 0000066B  E8 00000000 E	call Crlf
				mWrite "ERROR: cannot open scores.dat file"
 0000293B		     1		.data		
 0000293B 45 52 52 4F 52     1		??000E BYTE "ERROR: cannot open scores.dat file",0	
	   3A 20 63 61 6E
	   6E 6F 74 20 6F
	   70 65 6E 20 73
	   63 6F 72 65 73
	   2E 64 61 74 20
	   66 69 6C 65 00
 00000670		     1		.code
 00000670  52		     1		push	edx
 00000671  BA 0000293B R     1		mov	edx,OFFSET ??000E
 00000676  E8 00000000 E     1		call	WriteString
 0000067B  5A		     1		pop	edx
 0000067C  E8 00000000 E	call Crlf
 00000681  E8 00000000 E	call WaitMsg
 00000686  EB 70		jmp Quit
				.ENDIF

				invoke SetFilePointer, scoreSaveFileHandle, 0, 0, FILE_END

				INVOKE WriteFile, scoreSaveFileHandle, addr score, stringLength, addr stringLength, 0

				INVOKE WriteFile, scoreSaveFileHandle, addr fileBuffer, stringLength, addr stringLength, 0

				INVOKE CloseHandle, scoreSaveFileHandle

				;//set cursor invisible so that user doesn't see the cursor while playing the game
 000006DE  C7 05 00000014 R	mov cursorInfo.bVisible, FALSE
	   00000000
				INVOKE SetConsoleCursorInfo, consoleHandle, addr cursorInfo

 000006F8			Quit:
				ret
 000006FD			SaveScore ENDP

				;//------------------------------------------------------------------------------
 000006FD			GenerateScorePickups PROC
				;//
				;// Description: will randomly place score pickups on the map
				;// Uses: Nothing
				;// Receives: Nothing
				;// Returns: Nothing
				;// Remarks: this might end up as a macro for easer calling.
				;//------------------------------------------------------------------------------

 000006FD  C3			ret
 000006FE			GenerateScorePickups ENDP

				;//------------------------------------------------------------------------------
 000006FE			UpdatePlayerLocation PROC USES eax
				;// Uses: al
				;// Description: Don't Know May Not Be Used;
				;// Receives: the player current and future locations in global variables
				;// Returns: nothing
				;//------------------------------------------------------------------------------
 0000295E			.data
 000006FF			.code
 000006FF  33 C0		xor eax, eax

				;//Draw Player
				INVOKE SetConsoleCursorPosition, consoleHandle, CurrentPOS
 00000712  B0 20		mov al, " "
 00000714  E8 00000000 E	call WriteChar

				mCopyCOORD CurrentPOS, FuturePOS
 00000719  66| 50	     1	push ax
 0000071B  66| 33 C0	     1	xor ax, ax
 0000071E  66| A1	     1	mov ax, (coord ptr FuturePOS).X
	   0000001A R
 00000724  66| A3	     1	mov(coord ptr CurrentPOS).X, ax
	   0000001E R
 0000072A  66| 33 C0	     1	xor ax, ax
 0000072D  66| A1	     1	mov ax, (coord ptr FuturePOS).Y
	   0000001C R
 00000733  66| A3	     1	mov(coord ptr CurrentPOS).Y, ax
	   00000020 R
 00000739  66| 58	     1	pop ax

				INVOKE SetConsoleCursorPosition, consoleHandle, CurrentPOS
 0000074C  B0 DB		mov al, 0DBh;//player char box thing
 0000074E  E8 00000000 E	call WriteChar

				ret
 00000755			UpdatePlayerLocation ENDP

				end main
Microsoft (R) Macro Assembler Version 12.00.30501.0	    09/30/15 16:52:26
main.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mCopyCOORD . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mPrintAtLocation . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000295E Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000755 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GenerateScorePickups . . . . . .	P Near	 000006FD _TEXT	Length= 00000001 Public STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetPlayerInput . . . . . . . . .	P Near	 0000040D _TEXT	Length= 0000017B Public STDCALL
  keyPress . . . . . . . . . . .	Byte	 bp - 00000001
  Quit . . . . . . . . . . . . .	L Near	 00000585 _TEXT	
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetValueFromMatrix . . . . . . .	P Near	 000001DE _TEXT	Length= 0000002B Public STDCALL
  matrix . . . . . . . . . . . .	DWord	 bp + 00000008
  coords . . . . . . . . . . . .	DWord	 bp + 0000000C
  nRows  . . . . . . . . . . . .	Byte	 bp + 00000010
  nCols  . . . . . . . . . . . .	Byte	 bp + 00000014
  baseAddress  . . . . . . . . .	Byte	 bp - 00000001
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MainGameLoop . . . . . . . . . .	P Near	 00000209 _TEXT	Length= 0000015F Public STDCALL
  GameLoop . . . . . . . . . . .	L Near	 00000310 _TEXT	
  GameOver . . . . . . . . . . .	L Near	 0000032C _TEXT	
  Win  . . . . . . . . . . . . .	L Near	 00000349 _TEXT	
  quit . . . . . . . . . . . . .	L Near	 00000366 _TEXT	
MenuScreen . . . . . . . . . . .	P Near	 00000588 _TEXT	Length= 00000020 Public STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PrintHelpFile  . . . . . . . . .	P Near	 00000185 _TEXT	Length= 00000059 Public STDCALL
PrintMaze  . . . . . . . . . . .	P Near	 0000012C _TEXT	Length= 00000059 Public STDCALL
PrintScores  . . . . . . . . . .	P Near	 000000D8 _TEXT	Length= 00000054 Public STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SaveScore  . . . . . . . . . . .	P Near	 000005CF _TEXT	Length= 0000012E Public STDCALL
  Quit . . . . . . . . . . . . .	L Near	 000006F8 _TEXT	
ScoreScreen  . . . . . . . . . .	P Near	 000005A8 _TEXT	Length= 00000027 Public STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
UpdatePlayerLocation . . . . . .	P Near	 000006FE _TEXT	Length= 00000057 Public STDCALL
UpdateTimer  . . . . . . . . . .	P Near	 00000368 _TEXT	Length= 000000A5 Public STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000D8 Public STDCALL
  MainScreen . . . . . . . . . .	L Near	 00000077 _TEXT	
  Help . . . . . . . . . . . . .	L Near	 00000098 _TEXT	
  StartGame  . . . . . . . . . .	L Near	 000000A9 _TEXT	
  ShowScore  . . . . . . . . . .	L Near	 000000B0 _TEXT	
  ExitProgram  . . . . . . . . .	L Near	 000000D1 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	DWord	 00002799 _DATA	
??0001 . . . . . . . . . . . . .	Byte	 0000279D _DATA	
??0002 . . . . . . . . . . . . .	DWord	 000027CB _DATA	
??0003 . . . . . . . . . . . . .	Byte	 000027CF _DATA	
??0004 . . . . . . . . . . . . .	Byte	 000027FD _DATA	
??0005 . . . . . . . . . . . . .	Byte	 0000281C _DATA	
??0006 . . . . . . . . . . . . .	DWord	 00002853 _DATA	
??0007 . . . . . . . . . . . . .	Byte	 00002857 _DATA	
??0008 . . . . . . . . . . . . .	DWord	 00002885 _DATA	
??0009 . . . . . . . . . . . . .	Byte	 00002889 _DATA	
??000A . . . . . . . . . . . . .	Byte	 000028F1 _DATA	
??000B . . . . . . . . . . . . .	Byte	 0000290C _DATA	
??000C . . . . . . . . . . . . .	Byte	 00002914 _DATA	
??000D . . . . . . . . . . . . .	Byte	 00002925 _DATA	
??000E . . . . . . . . . . . . .	Byte	 0000293B _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BUFFER_SIZE  . . . . . . . . . .	Number	 00001388h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
CurrentPOS . . . . . . . . . . .	COORD	 0000001E _DATA	
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
FuturePOS  . . . . . . . . . . .	COORD	 0000001A _DATA	
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
ScorePOS . . . . . . . . . . . .	COORD	 00000022 _DATA	
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
TimerPOS . . . . . . . . . . . .	COORD	 00000026 _DATA	
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bytesInRow . . . . . . . . . . .	DWord	 00002795 _DATA	
consoleHandle  . . . . . . . . .	DWord	 0000000C _DATA	
consoleTitle . . . . . . . . . .	Byte	 00000000 _DATA	
cursorInfo . . . . . . . . . . .	CONSOLE_CURSOR_INFO  00000010 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileBuffer . . . . . . . . . . .	Byte	 0000007D _DATA	
fileHandle . . . . . . . . . . .	DWord	 00002791 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
helpFileHandle . . . . . . . . .	DWord	 0000278D _DATA	
helpFileName . . . . . . . . . .	Byte	 00000066 _DATA	
levelBuffer  . . . . . . . . . .	Byte	 00001405 _DATA	
levelfileName  . . . . . . . . .	Byte	 00000073 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
mapHeight  . . . . . . . . . . .	Byte	 00000019 _DATA	
mapWidth . . . . . . . . . . . .	Byte	 00000018 _DATA	
maxTime  . . . . . . . . . . . .	DWord	 0000004B _DATA	
msgMenu  . . . . . . . . . . . .	Byte	 000028B7 _DATA	
msgScoreTitle  . . . . . . . . .	Byte	 000028DE _DATA	
msgScore . . . . . . . . . . . .	Byte	 0000004F _DATA	
msgTiming  . . . . . . . . . . .	Byte	 0000002A _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
scoreFileName  . . . . . . . . .	Byte	 0000005B _DATA	
scoreSaveFileHandle  . . . . . .	DWord	 000028E9 _DATA	
score  . . . . . . . . . . . . .	DWord	 00000057 _DATA	
stringLength . . . . . . . . . .	DWord	 000028ED _DATA	
timeElapsed  . . . . . . . . . .	DWord	 00000043 _DATA	
timePrev . . . . . . . . . . . .	DWord	 0000003F _DATA	
timeRemaining  . . . . . . . . .	DWord	 00000047 _DATA	
timeStart  . . . . . . . . . . .	DWord	 0000003B _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   10 Warnings
	   0 Errors
