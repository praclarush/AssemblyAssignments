Microsoft (R) Macro Assembler Version 12.00.30501.0	    09/27/15 11:41:32
main.asm						     Page 1 - 1


				;/* ---------------------------------------------------------------------------
				;** File: main.asm
				;** Description: Maze Runner Game for Final Project in CSPG360
				;**              Computer Organization and Assembly Language
				;** Author: Nathan Bremmer
				;** -------------------------------------------------------------------------*/

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE macros.inc
			      C .NOLIST
			      C .LIST
			      C 

				.386
				.model flat, stdcall
main.asm(12) : warning A4011:multiple .MODEL directives found : .MODEL ignored
				.stack 4096

				;//Prototypes
				ExitProcess proto, dwExitCode:dword
				GetValueFromMatrix proto matrix : PTR BYTE, cords : COORD, nRows : byte, nCols : byte

				;//Constants
 = 00001388			BUFFER_SIZE = 5000

 00000000			.data

				;//Map data
 00000000 17			mapWidth BYTE 23
 00000001 14			mapHeight BYTE 20
 00000002 00000000		consoleHandle DWORD ?
 00000006 00000000		cursorInfo CONSOLE_CURSOR_INFO <>
	   00000000
 0000000E  00001388 [		buffer Byte BUFFER_SIZE DUP(? )
	    00
	   ]

				;//Player data - x, y
				ALIGN WORD
 00001396 0000 0001		FuturePOS COORD <0,1>
				ALIGN WORD
 0000139A 0000 0001		CurrentPOS COORD <0,1>
				ALIGN WORD
 0000139E 0000 0000		ScorePOS COORD <0,0>
				ALIGN WORD 
 000013A2 0000 0000		TimerPOS COORD <0,0>


				;//game info
 000013A6 54 69 6D 65 20	msgTiming byte "Time Remaining: ", 0
	   52 65 6D 61 69
	   6E 69 6E 67 3A
	   20 00
 000013B7 53 63 6F 72 65	msgScore byte "Score: ", 0
	   3A 20 00
 000013BF 00000000		score dword 0


 00000000			.code

				;//------------------------------------------------------------------------------
				mCopyCOORD MACRO destCOORD:req, sourceCOORD:req
				;//
				;// Description: Copies the values of one COORD struct to another
				;// Avoid Using ax
				;// Receives: a destination coord and a source coord struct; 
				;// Returns: Nothing
				;//------------------------------------------------------------------------------
				push ax

				xor ax, ax
				mov ax, (coord ptr sourceCOORD).X
				mov(coord ptr destCOORD).X, ax

				xor ax, ax
				mov ax, (coord ptr sourceCOORD).Y
				mov(coord ptr destCOORD).Y, ax

				pop ax
				ENDM

				;//------------------------------------------------------------------------------
				mPrintAtLocation MACRO message : req, coords : req, color : req, optionalIntValue
				LOCAL currentTextColor
				;//
				;// Description: prints a string in the specified color at the specified location
				;//              if an optionalIntValue is included print it after the message
				;// Avoid Using: eax, edx
				;// Receives:Message, coords, color, optional Value
				;// Returns:Nothing
				;//------------------------------------------------------------------------------
				.data
				currentTextColor DWORD ?
				.code
				INVOKE SetConsoleCursorPosition, consoleHandle, coords
				push eax
				push edx

				call GetTextColor
				mov currentTextColor, eax

				mov eax, color
				call SetTextColor

				mov edx, offset message
				call WriteString

				IFNB <optionalIntValue>
				xor eax,eax
				mov eax, optionalIntValue
				call WriteInt
				ENDIF

				mov eax, currentTextColor
				call SetTextColor

				pop edx
				pop eax
				ENDM

				;//------------------------------------------------------------------------------
 00000000			main proc
				;//
				;// Description: Main Application Entry Point
				;// Receives: Nothing
				;// Returns: Nothing
				;//------------------------------------------------------------------------------

				;//Init
				INVOKE GetStdHandle, STD_OUTPUT_HANDLE
 00000007  A3 00000002 R	mov consoleHandle, eax
				INVOKE GetConsoleCursorInfo, consoleHandle, addr cursorInfo
 0000001C  C7 05 0000000A R	mov cursorInfo.bVisible, FALSE
	   00000000
				INVOKE SetConsoleCursorInfo, consoleHandle, addr cursorInfo

 00000036  C7 05 000013BF R	mov score, 0
	   00000000
 00000040  66| 33 C0		xor ax, ax
 00000043  66| 0F B6 05		movzx ax, mapWidth
	   00000000 R
 0000004B  66| 83 C0 01		add ax, 1
 0000004F  66| A3		mov ScorePOS.X, ax
	   0000139E R
 00000055  66| C7 05		mov ScorePOS.Y, 2
	   000013A0 R
	   0002

 0000005E  66| A3		mov TimerPOS.X, ax
	   000013A2 R
 00000064  66| C7 05		mov TimerPOS.Y, 1
	   000013A4 R
	   0001

				;//End Init

 0000006D			MainScreen:
 0000006D  33 C0		xor eax,eax
 0000006F  E8 000002A6		call MenuScreen

 00000074  66| 83 F8 01		cmp ax, 1
 00000078  74 0E		jz StartGame
 0000007A  66| 83 F8 02		cmp ax, 2
 0000007E  74 0F		jz ShowScore
 00000080  66| 83 F8 03		cmp ax, 3
 00000084  74 2C		jz ExitProgram

 00000086  EB E5		jmp MainScreen


 00000088			StartGame:
 00000088  E8 000000B0		call MainGameLoop
 0000008D  EB DE		jmp MainScreen

 0000008F			ShowScore:
 0000008F  E8 000002A6		call ScoreScreen
 00000094  EB D7		jmp MainScreen

 00000096			GameOver:
 00000096  EB D5		jmp MainScreen

				;//Clean up Before Exit
 00000098  C7 05 0000000A R	mov cursorInfo.bVisible, TRUE
	   00000001
				INVOKE SetConsoleCursorInfo, consoleHandle, addr cursorInfo

 000000B2			ExitProgram:
				invoke ExitProcess, 0
 000000B9			main endp

				;//Procedures
				;//------------------------------------------------------------------------------
 000000B9			PrintMaze PROC USES edx ecx eax ebx
				;//
				;// Description: Reads the Map from a file into a buffer array and prints it to the screen
				;// Uses: edx, ecx, eax, and ebx
				;// Receives: Nothing
				;// Returns: array stored in buffer
				;//------------------------------------------------------------------------------

 000013C3			.data
 000013C3 6C 65 76 65 6C	fileName byte "level.dat", 0
	   2E 64 61 74 00
 000013CD 00000000		fileHandle HANDLE ?
 000000BD			.code
 000000BD  E8 00000000 E	call Clrscr
 000000C2  BA 000013C3 R	mov edx, OFFSET fileName
 000000C7  E8 00000000 E	call OpenInputFile
 000000CC  A3 000013CD R	mov fileHandle, eax

 000000D1  BA 0000000E R	mov edx, OFFSET buffer
 000000D6  B9 00001388		mov ecx, BUFFER_SIZE
 000000DB  E8 00000000 E	call ReadFromFile

				;//clean registers
 000000E0  B9 00000000		mov ecx, 0
 000000E5  B8 00000000		mov eax, 0
 000000EA  BB 00000000		mov ebx, 0

 000000EF  BA 0000000E R	mov edx, OFFSET buffer
 000000F4  B9 00001388		mov ecx, SIZEOF buffer

				;//Setup map size and player location
 000000F9  E8 00000000 E	call WriteString
 000000FE  E8 00000000 E	call Crlf

 00000103  A1 000013CD R	mov eax, fileHandle
 00000108  E8 00000000 E	call CloseFile

				ret
 00000112			PrintMaze ENDP

				;//------------------------------------------------------------------------------
 00000112			GetValueFromMatrix PROC USES eax ecx edx, 
				matrix: PTR BYTE, coords : COORD, nRows : byte, nCols : byte
				    LOCAL baseAddress : BYTE
				;//
				;// Description: The Main Game Loop
				;// Uses: eax, ecx, edx
				;// Receives: a Pointer to COORDs, nRows and, NCols
				;// Returns: the value in the array at the location specified in matrix using ebx
				;//------------------------------------------------------------------------------
 000013D1			.data
 000013D1 00000000		bytesInRow dword ?
 0000011B			.code
 0000011B  33 C0		xor eax, eax;//y || row
 0000011D  33 C9		xor ecx, ecx;//x || col
 0000011F  33 DB		xor ebx, ebx

 00000121  0F B7 4D 0C		movzx ecx, (coord ptr coords).X;//col
 00000125  0F B7 45 0E		movzx eax, (coord ptr coords).Y;//row
 00000129  F6 65 14		mul nCols;//multiply eax by nCols

 0000012C  03 C8		add ecx, eax
 0000012E  0F B6 1C 0D		movzx ebx, [buffer + 1 * ecx]
	   0000000E R
				ret
 0000013D			GetValueFromMatrix ENDP
main.asm(235) : warning A6004:procedure argument or local not referenced : matrix
main.asm(235) : warning A6004:procedure argument or local not referenced : nRows
main.asm(235) : warning A6004:procedure argument or local not referenced : baseAddress

				;//------------------------------------------------------------------------------
 0000013D			MainGameLoop PROC USES eax
				;//
				;// Description: The Main Game Loop
				;// Uses: eax
				;// Receives: Nothing
				;// Returns: value stored in gameOver variable as a 1 or 0
				;//------------------------------------------------------------------------------
 000013D5			.data

 0000013E			.code
				;// TODO(Nathan): Need to default COORS for current and future player POS for each new game

 0000013E  E8 FFFFFF76		call PrintMaze

				;//Draw starting information on screen before entering game loop
				mPrintAtLocation msgScore, ScorePOS, white, score
 000013D5		     1	.data
 000013D5 00000000	     1	??0000 DWORD ?
 00000143		     1	.code
 00000154  50		     1	push eax
 00000155  52		     1	push edx
 00000156  E8 00000000 E     1	call GetTextColor
 0000015B  A3 000013D5 R     1	mov ??0000, eax
 00000160  B8 0000000F	     1	mov eax, white
 00000165  E8 00000000 E     1	call SetTextColor
 0000016A  BA 000013B7 R     1	mov edx, offset msgScore
 0000016F  E8 00000000 E     1	call WriteString
 00000174  33 C0	     1	xor eax,eax
 00000176  A1 000013BF R     1	mov eax, score
 0000017B  E8 00000000 E     1	call WriteInt
 00000180  A1 000013D5 R     1	mov eax, ??0000
 00000185  E8 00000000 E     1	call SetTextColor
 0000018A  5A		     1	pop edx
 0000018B  58		     1	pop eax
				mPrintAtLocation msgTiming, TimerPOS, white
 000013D9		     1	.data
 000013D9 00000000	     1	??0001 DWORD ?
 0000018C		     1	.code
 0000019D  50		     1	push eax
 0000019E  52		     1	push edx
 0000019F  E8 00000000 E     1	call GetTextColor
 000001A4  A3 000013D9 R     1	mov ??0001, eax
 000001A9  B8 0000000F	     1	mov eax, white
 000001AE  E8 00000000 E     1	call SetTextColor
 000001B3  BA 000013A6 R     1	mov edx, offset msgTiming
 000001B8  E8 00000000 E     1	call WriteString
 000001BD  A1 000013D9 R     1	mov eax, ??0001
 000001C2  E8 00000000 E     1	call SetTextColor
 000001C7  5A		     1	pop edx
 000001C8  58		     1	pop eax

 000001C9  E8 0000018B		call UpdatePlayerLocation

 000001CE			GameLoop:
 000001CE  E8 00000004		call GetPlayerInput

				;//TODO(Nathan): check for end game flag and break out of loop 

 000001D3  EB F9		jmp GameLoop

				ret
 000001D7			MainGameLoop ENDP

				;//------------------------------------------------------------------------------
 000001D7			GetPlayerInput PROC USES eax
				LOCAL keyPress : BYTE
				;//
				;// Description: Gets the players Input then updates the character POS, Score and
				;//              and timer on the screen
				;// Uses: eax
				;// Receives: Nothing
				;// Returns: value stored in gameOver variable as a 1 or 0
				;//------------------------------------------------------------------------------
 000013DD			.data

 000001DE			.code
 000001DE  C6 45 FF 00		mov keyPress, 0

 000001E2  33 C0		xor eax, eax
 000001E4  B8 0000000A		mov eax, 10
 000001E9  E8 00000000 E	call Delay
 000001EE  E8 00000000 E	call ReadKey

 000001F3  88 45 FF		mov keyPress, al

				.IF(keyPress == "s")
 000001FC  66| FF 05		inc FuturePOS.Y
	   00001398 R
				.ELSEIF(keyPress == "w")
 0000020B  66| FF 0D		dec FuturePOS.Y
	   00001398 R
				.ELSEIF(keyPress == "d")
 0000021A  66| FF 05		inc FuturePOS.X
	   00001396 R
				.ELSEIF(keyPress == "a")
 00000229  66| FF 0D		dec FuturePOS.X
	   00001396 R
				.ENDIF

 00000230  33 DB		xor ebx, ebx
				invoke GetValueFromMatrix, addr buffer, FuturePOS, mapHeight, mapWidth

				;//Check if Move is valid
				.IF(ebx != 0 && ebx != 13 && ebx != 12 && ebx != 43 && ebx != 45 && ebx != 124 && keyPress != 1)

 00000281  E8 000000D3		call UpdatePlayerLocation

				.IF(ebx == 126)
				    ;//Game Over with Exit
				.ELSEIF(ebx == 42);// 157)
 00000292  83 05 000013BF R	    add score, 15
	   0F
				.ELSEIF(ebx == 234)
 000002A3  83 05 000013BF R	    add score, 10
	   0A
				.ENDIF

				mPrintAtLocation msgScore, ScorePOS, white, score
 000002AA 000002AA 000002AA 000013DD  1	.data
 000013DD 00000000	     1	??0002 DWORD ?
 000002AA		     1	.code
 000002BB  50		     1	push eax
 000002BC  52		     1	push edx
 000002BD  E8 00000000 E     1	call GetTextColor
 000002C2  A3 000013DD R     1	mov ??0002, eax
 000002C7  B8 0000000F	     1	mov eax, white
 000002CC  E8 00000000 E     1	call SetTextColor
 000002D1  BA 000013B7 R     1	mov edx, offset msgScore
 000002D6  E8 00000000 E     1	call WriteString
 000002DB  33 C0	     1	xor eax,eax
 000002DD  A1 000013BF R     1	mov eax, score
 000002E2  E8 00000000 E     1	call WriteInt
 000002E7  A1 000013DD R     1	mov eax, ??0002
 000002EC  E8 00000000 E     1	call SetTextColor
 000002F1  5A		     1	pop edx
 000002F2  58		     1	pop eax

				.ElSE
				mCopyCOORD FuturePOS, CurrentPOS
 000002F5  66| 50	     1	push ax
 000002F7  66| 33 C0	     1	xor ax, ax
 000002FA  66| A1	     1	mov ax, (coord ptr CurrentPOS).X
	   0000139A R
 00000300  66| A3	     1	mov(coord ptr FuturePOS).X, ax
	   00001396 R
 00000306  66| 33 C0	     1	xor ax, ax
 00000309  66| A1	     1	mov ax, (coord ptr CurrentPOS).Y
	   0000139C R
 0000030F  66| A3	     1	mov(coord ptr FuturePOS).Y, ax
	   00001398 R
 00000315  66| 58	     1	pop ax

				.ENDIF

				ret
 0000031A			GetPlayerInput ENDP

				;//------------------------------------------------------------------------------
 0000031A			MenuScreen PROC USES edx
				;//
				;// Description: Prints the Main Menu and Reads user input
				;// Uses: edx
				;// Receives: Nothing
				;// Returns: player menu choice stored in AX
				;//------------------------------------------------------------------------------
 000013E1			.data
 000013E1 31 3A 20 50 6C	msgMenu byte "1: Play", 13, 10, "2: Scores", 13, 10, "3: Exit", 13, 10, 0
	   61 79 0D 0A 32
	   3A 20 53 63 6F
	   72 65 73 0D 0A
	   33 3A 20 45 78
	   69 74 0D 0A 00

 0000031B			.code
 0000031B  33 C0		xor eax, eax
 0000031D  33 D2		xor edx, edx

 0000031F  E8 00000000 E	call Clrscr

 00000324  BA 000013E1 R	mov edx, OFFSET msgMenu
 00000329  E8 00000000 E	call WriteString
 0000032E  E8 00000000 E	call Crlf
 00000333  E8 00000000 E	call readInt

				ret
 0000033A			MenuScreen ENDP

				;//------------------------------------------------------------------------------
 0000033A			ScoreScreen PROC USES eax edx
				;//
				;// Description: Reads and Displays the Scores from a File
				;// Uses: eax and edx
				;// Receives: Nothing
				;// Returns: Nothing
				;//------------------------------------------------------------------------------
 000013FF			.data
 000013FF 53 63 6F 72 65	msgScoreTitle byte "Scores: ", 13, 10, 0
	   73 3A 20 0D 0A
	   00

 0000033C			.code
 0000033C  33 C0		xor eax, eax
 0000033E  33 D2		xor edx, edx

 00000340  E8 00000000 E	call Clrscr

 00000345  BA 000013FF R	mov edx, OFFSET msgScoreTitle
 0000034A  E8 00000000 E	call WriteString

 0000034F  E8 00000000 E	call WaitMsg
				;/*TODO(Nathan) Task List in order of operations for Score Screen
				 ; *1. Clear Screen
				 ; *2. Read Score File
				 ; *3. Print Scores onto Screen
				 ; *4. Print Options for Return to Main Screen, Clear Score List
				 ; *Notes: Read Player Input here?.
				 ; */
				ret
 00000357			ScoreScreen ENDP

				;//------------------------------------------------------------------------------
 00000357			SaveScore PROC;
				;//
				;// Description: Saves the Score and Completion Time to a file 
				;// Uses:
				;// Receives: name, score and, time remaining
				;// Returns: Nothing
				;//------------------------------------------------------------------------------
 0000140A			.data
 00000357			.code

 00000357  C3			ret
 00000358			SaveScore ENDP

 00000358			GenerateScorePickups PROC
				;//
				;// Description: will randomly place score pickups on the map
				;// Uses: Nothing
				;// Receives: Nothing
				;// Returns: Nothing
				;// Remarks: this might end up as a macro for easer calling.
				;//------------------------------------------------------------------------------

 00000358  C3			ret
 00000359			GenerateScorePickups ENDP

 00000359			UpdatePlayerLocation PROC USES eax
				;// Uses: al
				;// Description: Don't Know May Not Be Used;
				;// Receives: the player current and future locations in global variables
				;// Returns: nothing
				;//------------------------------------------------------------------------------
 0000140A			.data
 0000035A			.code
 0000035A  33 C0		xor eax, eax

				;//Draw Player
				INVOKE SetConsoleCursorPosition, consoleHandle, CurrentPOS
 0000036D  B0 20		mov al, " "
 0000036F  E8 00000000 E	call WriteChar

				mCopyCOORD CurrentPOS, FuturePOS
 00000374  66| 50	     1	push ax
 00000376  66| 33 C0	     1	xor ax, ax
 00000379  66| A1	     1	mov ax, (coord ptr FuturePOS).X
	   00001396 R
 0000037F  66| A3	     1	mov(coord ptr CurrentPOS).X, ax
	   0000139A R
 00000385  66| 33 C0	     1	xor ax, ax
 00000388  66| A1	     1	mov ax, (coord ptr FuturePOS).Y
	   00001398 R
 0000038E  66| A3	     1	mov(coord ptr CurrentPOS).Y, ax
	   0000139C R
 00000394  66| 58	     1	pop ax

				INVOKE SetConsoleCursorPosition, consoleHandle, CurrentPOS
 000003A7  B0 DB		mov al, 0DBh;//player char box thing
 000003A9  E8 00000000 E	call WriteChar

				ret
 000003B0			UpdatePlayerLocation ENDP

				end main
Microsoft (R) Macro Assembler Version 12.00.30501.0	    09/27/15 11:41:32
main.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mCopyCOORD . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mPrintAtLocation . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000140A Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000003B0 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GenerateScorePickups . . . . . .	P Near	 00000358 _TEXT	Length= 00000001 Public STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetPlayerInput . . . . . . . . .	P Near	 000001D7 _TEXT	Length= 00000143 Public STDCALL
  keyPress . . . . . . . . . . .	Byte	 bp - 00000001
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetValueFromMatrix . . . . . . .	P Near	 00000112 _TEXT	Length= 0000002B Public STDCALL
  matrix . . . . . . . . . . . .	DWord	 bp + 00000008
  coords . . . . . . . . . . . .	DWord	 bp + 0000000C
  nRows  . . . . . . . . . . . .	Byte	 bp + 00000010
  nCols  . . . . . . . . . . . .	Byte	 bp + 00000014
  baseAddress  . . . . . . . . .	Byte	 bp - 00000001
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MainGameLoop . . . . . . . . . .	P Near	 0000013D _TEXT	Length= 0000009A Public STDCALL
  GameLoop . . . . . . . . . . .	L Near	 000001CE _TEXT	
MenuScreen . . . . . . . . . . .	P Near	 0000031A _TEXT	Length= 00000020 Public STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PrintMaze  . . . . . . . . . . .	P Near	 000000B9 _TEXT	Length= 00000059 Public STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SaveScore  . . . . . . . . . . .	P Near	 00000357 _TEXT	Length= 00000001 Public STDCALL
ScoreScreen  . . . . . . . . . .	P Near	 0000033A _TEXT	Length= 0000001D Public STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
UpdatePlayerLocation . . . . . .	P Near	 00000359 _TEXT	Length= 00000057 Public STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000B9 Public STDCALL
  MainScreen . . . . . . . . . .	L Near	 0000006D _TEXT	
  StartGame  . . . . . . . . . .	L Near	 00000088 _TEXT	
  ShowScore  . . . . . . . . . .	L Near	 0000008F _TEXT	
  GameOver . . . . . . . . . . .	L Near	 00000096 _TEXT	
  ExitProgram  . . . . . . . . .	L Near	 000000B2 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	DWord	 000013D5 _DATA	
??0001 . . . . . . . . . . . . .	DWord	 000013D9 _DATA	
??0002 . . . . . . . . . . . . .	DWord	 000013DD _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BUFFER_SIZE  . . . . . . . . . .	Number	 00001388h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
CurrentPOS . . . . . . . . . . .	COORD	 0000139A _DATA	
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
FuturePOS  . . . . . . . . . . .	COORD	 00001396 _DATA	
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
ScorePOS . . . . . . . . . . . .	COORD	 0000139E _DATA	
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
TimerPOS . . . . . . . . . . . .	COORD	 000013A2 _DATA	
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	Byte	 0000000E _DATA	
bytesInRow . . . . . . . . . . .	DWord	 000013D1 _DATA	
consoleHandle  . . . . . . . . .	DWord	 00000002 _DATA	
cursorInfo . . . . . . . . . . .	CONSOLE_CURSOR_INFO  00000006 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileHandle . . . . . . . . . . .	DWord	 000013CD _DATA	
fileName . . . . . . . . . . . .	Byte	 000013C3 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
mapHeight  . . . . . . . . . . .	Byte	 00000001 _DATA	
mapWidth . . . . . . . . . . . .	Byte	 00000000 _DATA	
msgMenu  . . . . . . . . . . . .	Byte	 000013E1 _DATA	
msgScoreTitle  . . . . . . . . .	Byte	 000013FF _DATA	
msgScore . . . . . . . . . . . .	Byte	 000013B7 _DATA	
msgTiming  . . . . . . . . . . .	Byte	 000013A6 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
score  . . . . . . . . . . . . .	DWord	 000013BF _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   4 Warnings
	   0 Errors
